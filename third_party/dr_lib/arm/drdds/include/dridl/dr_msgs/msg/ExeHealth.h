// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ExeHealth.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_EXEHEALTH_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_EXEHEALTH_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "MetaType.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(EXEHEALTH_SOURCE)
#define EXEHEALTH_DllAPI __declspec( dllexport )
#else
#define EXEHEALTH_DllAPI __declspec( dllimport )
#endif // EXEHEALTH_SOURCE
#else
#define EXEHEALTH_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define EXEHEALTH_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {





/*!
 * @brief This class represents the structure BatteryValue defined by the user in the IDL file.
 * @ingroup ExeHealth
 */
class BatteryValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BatteryValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BatteryValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::BatteryValue that will be copied.
     */
    eProsima_user_DllExport BatteryValue(
            const BatteryValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::BatteryValue that will be copied.
     */
    eProsima_user_DllExport BatteryValue(
            BatteryValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::BatteryValue that will be copied.
     */
    eProsima_user_DllExport BatteryValue& operator =(
            const BatteryValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::BatteryValue that will be copied.
     */
    eProsima_user_DllExport BatteryValue& operator =(
            BatteryValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::BatteryValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BatteryValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::BatteryValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BatteryValue& x) const;

    /*!
     * @brief This function sets a value in member voltage
     * @param _voltage New value for member voltage
     */
    eProsima_user_DllExport void voltage(
            uint16_t _voltage);

    /*!
     * @brief This function returns the value of member voltage
     * @return Value of member voltage
     */
    eProsima_user_DllExport uint16_t voltage() const;

    /*!
     * @brief This function returns a reference to member voltage
     * @return Reference to member voltage
     */
    eProsima_user_DllExport uint16_t& voltage();


    /*!
     * @brief This function sets a value in member current
     * @param _current New value for member current
     */
    eProsima_user_DllExport void current(
            int16_t _current);

    /*!
     * @brief This function returns the value of member current
     * @return Value of member current
     */
    eProsima_user_DllExport int16_t current() const;

    /*!
     * @brief This function returns a reference to member current
     * @return Reference to member current
     */
    eProsima_user_DllExport int16_t& current();


    /*!
     * @brief This function sets a value in member remaining_capacity
     * @param _remaining_capacity New value for member remaining_capacity
     */
    eProsima_user_DllExport void remaining_capacity(
            uint16_t _remaining_capacity);

    /*!
     * @brief This function returns the value of member remaining_capacity
     * @return Value of member remaining_capacity
     */
    eProsima_user_DllExport uint16_t remaining_capacity() const;

    /*!
     * @brief This function returns a reference to member remaining_capacity
     * @return Reference to member remaining_capacity
     */
    eProsima_user_DllExport uint16_t& remaining_capacity();


    /*!
     * @brief This function sets a value in member nominal_capacity
     * @param _nominal_capacity New value for member nominal_capacity
     */
    eProsima_user_DllExport void nominal_capacity(
            uint16_t _nominal_capacity);

    /*!
     * @brief This function returns the value of member nominal_capacity
     * @return Value of member nominal_capacity
     */
    eProsima_user_DllExport uint16_t nominal_capacity() const;

    /*!
     * @brief This function returns a reference to member nominal_capacity
     * @return Reference to member nominal_capacity
     */
    eProsima_user_DllExport uint16_t& nominal_capacity();


    /*!
     * @brief This function sets a value in member cycles
     * @param _cycles New value for member cycles
     */
    eProsima_user_DllExport void cycles(
            uint16_t _cycles);

    /*!
     * @brief This function returns the value of member cycles
     * @return Value of member cycles
     */
    eProsima_user_DllExport uint16_t cycles() const;

    /*!
     * @brief This function returns a reference to member cycles
     * @return Reference to member cycles
     */
    eProsima_user_DllExport uint16_t& cycles();


    /*!
     * @brief This function sets a value in member production_date
     * @param _production_date New value for member production_date
     */
    eProsima_user_DllExport void production_date(
            uint16_t _production_date);

    /*!
     * @brief This function returns the value of member production_date
     * @return Value of member production_date
     */
    eProsima_user_DllExport uint16_t production_date() const;

    /*!
     * @brief This function returns a reference to member production_date
     * @return Reference to member production_date
     */
    eProsima_user_DllExport uint16_t& production_date();


    /*!
     * @brief This function sets a value in member balanced_low
     * @param _balanced_low New value for member balanced_low
     */
    eProsima_user_DllExport void balanced_low(
            uint16_t _balanced_low);

    /*!
     * @brief This function returns the value of member balanced_low
     * @return Value of member balanced_low
     */
    eProsima_user_DllExport uint16_t balanced_low() const;

    /*!
     * @brief This function returns a reference to member balanced_low
     * @return Reference to member balanced_low
     */
    eProsima_user_DllExport uint16_t& balanced_low();


    /*!
     * @brief This function sets a value in member balanced_high
     * @param _balanced_high New value for member balanced_high
     */
    eProsima_user_DllExport void balanced_high(
            uint16_t _balanced_high);

    /*!
     * @brief This function returns the value of member balanced_high
     * @return Value of member balanced_high
     */
    eProsima_user_DllExport uint16_t balanced_high() const;

    /*!
     * @brief This function returns a reference to member balanced_high
     * @return Reference to member balanced_high
     */
    eProsima_user_DllExport uint16_t& balanced_high();


    /*!
     * @brief This function sets a value in member protected_state
     * @param _protected_state New value for member protected_state
     */
    eProsima_user_DllExport void protected_state(
            uint16_t _protected_state);

    /*!
     * @brief This function returns the value of member protected_state
     * @return Value of member protected_state
     */
    eProsima_user_DllExport uint16_t protected_state() const;

    /*!
     * @brief This function returns a reference to member protected_state
     * @return Reference to member protected_state
     */
    eProsima_user_DllExport uint16_t& protected_state();


    /*!
     * @brief This function sets a value in member software_version
     * @param _software_version New value for member software_version
     */
    eProsima_user_DllExport void software_version(
            uint8_t _software_version);

    /*!
     * @brief This function returns the value of member software_version
     * @return Value of member software_version
     */
    eProsima_user_DllExport uint8_t software_version() const;

    /*!
     * @brief This function returns a reference to member software_version
     * @return Reference to member software_version
     */
    eProsima_user_DllExport uint8_t& software_version();


    /*!
     * @brief This function sets a value in member battery_level
     * @param _battery_level New value for member battery_level
     */
    eProsima_user_DllExport void battery_level(
            uint8_t _battery_level);

    /*!
     * @brief This function returns the value of member battery_level
     * @return Value of member battery_level
     */
    eProsima_user_DllExport uint8_t battery_level() const;

    /*!
     * @brief This function returns a reference to member battery_level
     * @return Reference to member battery_level
     */
    eProsima_user_DllExport uint8_t& battery_level();


    /*!
     * @brief This function sets a value in member mos_state
     * @param _mos_state New value for member mos_state
     */
    eProsima_user_DllExport void mos_state(
            uint8_t _mos_state);

    /*!
     * @brief This function returns the value of member mos_state
     * @return Value of member mos_state
     */
    eProsima_user_DllExport uint8_t mos_state() const;

    /*!
     * @brief This function returns a reference to member mos_state
     * @return Reference to member mos_state
     */
    eProsima_user_DllExport uint8_t& mos_state();


    /*!
     * @brief This function sets a value in member battery_quantity
     * @param _battery_quantity New value for member battery_quantity
     */
    eProsima_user_DllExport void battery_quantity(
            uint8_t _battery_quantity);

    /*!
     * @brief This function returns the value of member battery_quantity
     * @return Value of member battery_quantity
     */
    eProsima_user_DllExport uint8_t battery_quantity() const;

    /*!
     * @brief This function returns a reference to member battery_quantity
     * @return Reference to member battery_quantity
     */
    eProsima_user_DllExport uint8_t& battery_quantity();


    /*!
     * @brief This function sets a value in member battery_ntc
     * @param _battery_ntc New value for member battery_ntc
     */
    eProsima_user_DllExport void battery_ntc(
            uint8_t _battery_ntc);

    /*!
     * @brief This function returns the value of member battery_ntc
     * @return Value of member battery_ntc
     */
    eProsima_user_DllExport uint8_t battery_ntc() const;

    /*!
     * @brief This function returns a reference to member battery_ntc
     * @return Reference to member battery_ntc
     */
    eProsima_user_DllExport uint8_t& battery_ntc();


    /*!
     * @brief This function copies the value in member battery_temperature
     * @param _battery_temperature New value to be copied in member battery_temperature
     */
    eProsima_user_DllExport void battery_temperature(
            const std::vector<float>& _battery_temperature);

    /*!
     * @brief This function moves the value in member battery_temperature
     * @param _battery_temperature New value to be moved in member battery_temperature
     */
    eProsima_user_DllExport void battery_temperature(
            std::vector<float>&& _battery_temperature);

    /*!
     * @brief This function returns a constant reference to member battery_temperature
     * @return Constant reference to member battery_temperature
     */
    eProsima_user_DllExport const std::vector<float>& battery_temperature() const;

    /*!
     * @brief This function returns a reference to member battery_temperature
     * @return Reference to member battery_temperature
     */
    eProsima_user_DllExport std::vector<float>& battery_temperature();

private:

    uint16_t m_voltage{0};
    int16_t m_current{0};
    uint16_t m_remaining_capacity{0};
    uint16_t m_nominal_capacity{0};
    uint16_t m_cycles{0};
    uint16_t m_production_date{0};
    uint16_t m_balanced_low{0};
    uint16_t m_balanced_high{0};
    uint16_t m_protected_state{0};
    uint8_t m_software_version{0};
    uint8_t m_battery_level{0};
    uint8_t m_mos_state{0};
    uint8_t m_battery_quantity{0};
    uint8_t m_battery_ntc{0};
    std::vector<float> m_battery_temperature;

};


/*!
 * @brief This class represents the structure DeviceTemperatureValue defined by the user in the IDL file.
 * @ingroup ExeHealth
 */
class DeviceTemperatureValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DeviceTemperatureValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DeviceTemperatureValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::DeviceTemperatureValue that will be copied.
     */
    eProsima_user_DllExport DeviceTemperatureValue(
            const DeviceTemperatureValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::DeviceTemperatureValue that will be copied.
     */
    eProsima_user_DllExport DeviceTemperatureValue(
            DeviceTemperatureValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::DeviceTemperatureValue that will be copied.
     */
    eProsima_user_DllExport DeviceTemperatureValue& operator =(
            const DeviceTemperatureValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::DeviceTemperatureValue that will be copied.
     */
    eProsima_user_DllExport DeviceTemperatureValue& operator =(
            DeviceTemperatureValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::DeviceTemperatureValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DeviceTemperatureValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::DeviceTemperatureValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DeviceTemperatureValue& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function sets a value in member motor_temperature
     * @param _motor_temperature New value for member motor_temperature
     */
    eProsima_user_DllExport void motor_temperature(
            float _motor_temperature);

    /*!
     * @brief This function returns the value of member motor_temperature
     * @return Value of member motor_temperature
     */
    eProsima_user_DllExport float motor_temperature() const;

    /*!
     * @brief This function returns a reference to member motor_temperature
     * @return Reference to member motor_temperature
     */
    eProsima_user_DllExport float& motor_temperature();


    /*!
     * @brief This function sets a value in member driver_temperature
     * @param _driver_temperature New value for member driver_temperature
     */
    eProsima_user_DllExport void driver_temperature(
            float _driver_temperature);

    /*!
     * @brief This function returns the value of member driver_temperature
     * @return Value of member driver_temperature
     */
    eProsima_user_DllExport float driver_temperature() const;

    /*!
     * @brief This function returns a reference to member driver_temperature
     * @return Reference to member driver_temperature
     */
    eProsima_user_DllExport float& driver_temperature();

private:

    std::string m_name;
    float m_motor_temperature{0.0};
    float m_driver_temperature{0.0};

};




/*!
 * @brief This class represents the structure CpuValue defined by the user in the IDL file.
 * @ingroup ExeHealth
 */
class CpuValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CpuValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CpuValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::CpuValue that will be copied.
     */
    eProsima_user_DllExport CpuValue(
            const CpuValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::CpuValue that will be copied.
     */
    eProsima_user_DllExport CpuValue(
            CpuValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::CpuValue that will be copied.
     */
    eProsima_user_DllExport CpuValue& operator =(
            const CpuValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::CpuValue that will be copied.
     */
    eProsima_user_DllExport CpuValue& operator =(
            CpuValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::CpuValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CpuValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::CpuValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CpuValue& x) const;

    /*!
     * @brief This function sets a value in member cpu_total_temperature
     * @param _cpu_total_temperature New value for member cpu_total_temperature
     */
    eProsima_user_DllExport void cpu_total_temperature(
            float _cpu_total_temperature);

    /*!
     * @brief This function returns the value of member cpu_total_temperature
     * @return Value of member cpu_total_temperature
     */
    eProsima_user_DllExport float cpu_total_temperature() const;

    /*!
     * @brief This function returns a reference to member cpu_total_temperature
     * @return Reference to member cpu_total_temperature
     */
    eProsima_user_DllExport float& cpu_total_temperature();


    /*!
     * @brief This function sets a value in member cpu_total_frequency
     * @param _cpu_total_frequency New value for member cpu_total_frequency
     */
    eProsima_user_DllExport void cpu_total_frequency(
            float _cpu_total_frequency);

    /*!
     * @brief This function returns the value of member cpu_total_frequency
     * @return Value of member cpu_total_frequency
     */
    eProsima_user_DllExport float cpu_total_frequency() const;

    /*!
     * @brief This function returns a reference to member cpu_total_frequency
     * @return Reference to member cpu_total_frequency
     */
    eProsima_user_DllExport float& cpu_total_frequency();


    /*!
     * @brief This function copies the value in member cpu_temperature
     * @param _cpu_temperature New value to be copied in member cpu_temperature
     */
    eProsima_user_DllExport void cpu_temperature(
            const std::vector<float>& _cpu_temperature);

    /*!
     * @brief This function moves the value in member cpu_temperature
     * @param _cpu_temperature New value to be moved in member cpu_temperature
     */
    eProsima_user_DllExport void cpu_temperature(
            std::vector<float>&& _cpu_temperature);

    /*!
     * @brief This function returns a constant reference to member cpu_temperature
     * @return Constant reference to member cpu_temperature
     */
    eProsima_user_DllExport const std::vector<float>& cpu_temperature() const;

    /*!
     * @brief This function returns a reference to member cpu_temperature
     * @return Reference to member cpu_temperature
     */
    eProsima_user_DllExport std::vector<float>& cpu_temperature();


    /*!
     * @brief This function copies the value in member cpu_frequency
     * @param _cpu_frequency New value to be copied in member cpu_frequency
     */
    eProsima_user_DllExport void cpu_frequency(
            const std::vector<float>& _cpu_frequency);

    /*!
     * @brief This function moves the value in member cpu_frequency
     * @param _cpu_frequency New value to be moved in member cpu_frequency
     */
    eProsima_user_DllExport void cpu_frequency(
            std::vector<float>&& _cpu_frequency);

    /*!
     * @brief This function returns a constant reference to member cpu_frequency
     * @return Constant reference to member cpu_frequency
     */
    eProsima_user_DllExport const std::vector<float>& cpu_frequency() const;

    /*!
     * @brief This function returns a reference to member cpu_frequency
     * @return Reference to member cpu_frequency
     */
    eProsima_user_DllExport std::vector<float>& cpu_frequency();

private:

    float m_cpu_total_temperature{0.0};
    float m_cpu_total_frequency{0.0};
    std::vector<float> m_cpu_temperature;
    std::vector<float> m_cpu_frequency;

};


/*!
 * @brief This class represents the structure ExeValue defined by the user in the IDL file.
 * @ingroup ExeHealth
 */
class ExeValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ExeValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ExeValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::ExeValue that will be copied.
     */
    eProsima_user_DllExport ExeValue(
            const ExeValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::ExeValue that will be copied.
     */
    eProsima_user_DllExport ExeValue(
            ExeValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::ExeValue that will be copied.
     */
    eProsima_user_DllExport ExeValue& operator =(
            const ExeValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::ExeValue that will be copied.
     */
    eProsima_user_DllExport ExeValue& operator =(
            ExeValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExeValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ExeValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExeValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ExeValue& x) const;

    /*!
     * @brief This function copies the value in member robot_name
     * @param _robot_name New value to be copied in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            const std::string& _robot_name);

    /*!
     * @brief This function moves the value in member robot_name
     * @param _robot_name New value to be moved in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            std::string&& _robot_name);

    /*!
     * @brief This function returns a constant reference to member robot_name
     * @return Constant reference to member robot_name
     */
    eProsima_user_DllExport const std::string& robot_name() const;

    /*!
     * @brief This function returns a reference to member robot_name
     * @return Reference to member robot_name
     */
    eProsima_user_DllExport std::string& robot_name();


    /*!
     * @brief This function sets a value in member current_mileage
     * @param _current_mileage New value for member current_mileage
     */
    eProsima_user_DllExport void current_mileage(
            int32_t _current_mileage);

    /*!
     * @brief This function returns the value of member current_mileage
     * @return Value of member current_mileage
     */
    eProsima_user_DllExport int32_t current_mileage() const;

    /*!
     * @brief This function returns a reference to member current_mileage
     * @return Reference to member current_mileage
     */
    eProsima_user_DllExport int32_t& current_mileage();


    /*!
     * @brief This function sets a value in member total_mileage
     * @param _total_mileage New value for member total_mileage
     */
    eProsima_user_DllExport void total_mileage(
            int32_t _total_mileage);

    /*!
     * @brief This function returns the value of member total_mileage
     * @return Value of member total_mileage
     */
    eProsima_user_DllExport int32_t total_mileage() const;

    /*!
     * @brief This function returns a reference to member total_mileage
     * @return Reference to member total_mileage
     */
    eProsima_user_DllExport int32_t& total_mileage();


    /*!
     * @brief This function sets a value in member current_run_time
     * @param _current_run_time New value for member current_run_time
     */
    eProsima_user_DllExport void current_run_time(
            int32_t _current_run_time);

    /*!
     * @brief This function returns the value of member current_run_time
     * @return Value of member current_run_time
     */
    eProsima_user_DllExport int32_t current_run_time() const;

    /*!
     * @brief This function returns a reference to member current_run_time
     * @return Reference to member current_run_time
     */
    eProsima_user_DllExport int32_t& current_run_time();


    /*!
     * @brief This function sets a value in member total_run_time
     * @param _total_run_time New value for member total_run_time
     */
    eProsima_user_DllExport void total_run_time(
            int32_t _total_run_time);

    /*!
     * @brief This function returns the value of member total_run_time
     * @return Value of member total_run_time
     */
    eProsima_user_DllExport int32_t total_run_time() const;

    /*!
     * @brief This function returns a reference to member total_run_time
     * @return Reference to member total_run_time
     */
    eProsima_user_DllExport int32_t& total_run_time();


    /*!
     * @brief This function sets a value in member current_motion_time
     * @param _current_motion_time New value for member current_motion_time
     */
    eProsima_user_DllExport void current_motion_time(
            int32_t _current_motion_time);

    /*!
     * @brief This function returns the value of member current_motion_time
     * @return Value of member current_motion_time
     */
    eProsima_user_DllExport int32_t current_motion_time() const;

    /*!
     * @brief This function returns a reference to member current_motion_time
     * @return Reference to member current_motion_time
     */
    eProsima_user_DllExport int32_t& current_motion_time();


    /*!
     * @brief This function sets a value in member total_motion_time
     * @param _total_motion_time New value for member total_motion_time
     */
    eProsima_user_DllExport void total_motion_time(
            int32_t _total_motion_time);

    /*!
     * @brief This function returns the value of member total_motion_time
     * @return Value of member total_motion_time
     */
    eProsima_user_DllExport int32_t total_motion_time() const;

    /*!
     * @brief This function returns a reference to member total_motion_time
     * @return Reference to member total_motion_time
     */
    eProsima_user_DllExport int32_t& total_motion_time();

private:

    std::string m_robot_name;
    int32_t m_current_mileage{0};
    int32_t m_total_mileage{0};
    int32_t m_current_run_time{0};
    int32_t m_total_run_time{0};
    int32_t m_current_motion_time{0};
    int32_t m_total_motion_time{0};

};


/*!
 * @brief This class represents the structure ExeHealthValue defined by the user in the IDL file.
 * @ingroup ExeHealth
 */
class ExeHealthValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ExeHealthValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ExeHealthValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::ExeHealthValue that will be copied.
     */
    eProsima_user_DllExport ExeHealthValue(
            const ExeHealthValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::ExeHealthValue that will be copied.
     */
    eProsima_user_DllExport ExeHealthValue(
            ExeHealthValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::ExeHealthValue that will be copied.
     */
    eProsima_user_DllExport ExeHealthValue& operator =(
            const ExeHealthValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::ExeHealthValue that will be copied.
     */
    eProsima_user_DllExport ExeHealthValue& operator =(
            ExeHealthValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExeHealthValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ExeHealthValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExeHealthValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ExeHealthValue& x) const;

    /*!
     * @brief This function copies the value in member battery_info
     * @param _battery_info New value to be copied in member battery_info
     */
    eProsima_user_DllExport void battery_info(
            const std::vector<drdds::msg::BatteryValue>& _battery_info);

    /*!
     * @brief This function moves the value in member battery_info
     * @param _battery_info New value to be moved in member battery_info
     */
    eProsima_user_DllExport void battery_info(
            std::vector<drdds::msg::BatteryValue>&& _battery_info);

    /*!
     * @brief This function returns a constant reference to member battery_info
     * @return Constant reference to member battery_info
     */
    eProsima_user_DllExport const std::vector<drdds::msg::BatteryValue>& battery_info() const;

    /*!
     * @brief This function returns a reference to member battery_info
     * @return Reference to member battery_info
     */
    eProsima_user_DllExport std::vector<drdds::msg::BatteryValue>& battery_info();


    /*!
     * @brief This function copies the value in member devices_temperature
     * @param _devices_temperature New value to be copied in member devices_temperature
     */
    eProsima_user_DllExport void devices_temperature(
            const std::vector<drdds::msg::DeviceTemperatureValue>& _devices_temperature);

    /*!
     * @brief This function moves the value in member devices_temperature
     * @param _devices_temperature New value to be moved in member devices_temperature
     */
    eProsima_user_DllExport void devices_temperature(
            std::vector<drdds::msg::DeviceTemperatureValue>&& _devices_temperature);

    /*!
     * @brief This function returns a constant reference to member devices_temperature
     * @return Constant reference to member devices_temperature
     */
    eProsima_user_DllExport const std::vector<drdds::msg::DeviceTemperatureValue>& devices_temperature() const;

    /*!
     * @brief This function returns a reference to member devices_temperature
     * @return Reference to member devices_temperature
     */
    eProsima_user_DllExport std::vector<drdds::msg::DeviceTemperatureValue>& devices_temperature();


    /*!
     * @brief This function copies the value in member cpu_info
     * @param _cpu_info New value to be copied in member cpu_info
     */
    eProsima_user_DllExport void cpu_info(
            const drdds::msg::CpuValue& _cpu_info);

    /*!
     * @brief This function moves the value in member cpu_info
     * @param _cpu_info New value to be moved in member cpu_info
     */
    eProsima_user_DllExport void cpu_info(
            drdds::msg::CpuValue&& _cpu_info);

    /*!
     * @brief This function returns a constant reference to member cpu_info
     * @return Constant reference to member cpu_info
     */
    eProsima_user_DllExport const drdds::msg::CpuValue& cpu_info() const;

    /*!
     * @brief This function returns a reference to member cpu_info
     * @return Reference to member cpu_info
     */
    eProsima_user_DllExport drdds::msg::CpuValue& cpu_info();


    /*!
     * @brief This function copies the value in member exe_data
     * @param _exe_data New value to be copied in member exe_data
     */
    eProsima_user_DllExport void exe_data(
            const drdds::msg::ExeValue& _exe_data);

    /*!
     * @brief This function moves the value in member exe_data
     * @param _exe_data New value to be moved in member exe_data
     */
    eProsima_user_DllExport void exe_data(
            drdds::msg::ExeValue&& _exe_data);

    /*!
     * @brief This function returns a constant reference to member exe_data
     * @return Constant reference to member exe_data
     */
    eProsima_user_DllExport const drdds::msg::ExeValue& exe_data() const;

    /*!
     * @brief This function returns a reference to member exe_data
     * @return Reference to member exe_data
     */
    eProsima_user_DllExport drdds::msg::ExeValue& exe_data();

private:

    std::vector<drdds::msg::BatteryValue> m_battery_info;
    std::vector<drdds::msg::DeviceTemperatureValue> m_devices_temperature;
    drdds::msg::CpuValue m_cpu_info;
    drdds::msg::ExeValue m_exe_data;

};


/*!
 * @brief This class represents the structure ExeHealth defined by the user in the IDL file.
 * @ingroup ExeHealth
 */
class ExeHealth
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ExeHealth();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ExeHealth();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::ExeHealth that will be copied.
     */
    eProsima_user_DllExport ExeHealth(
            const ExeHealth& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::ExeHealth that will be copied.
     */
    eProsima_user_DllExport ExeHealth(
            ExeHealth&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::ExeHealth that will be copied.
     */
    eProsima_user_DllExport ExeHealth& operator =(
            const ExeHealth& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::ExeHealth that will be copied.
     */
    eProsima_user_DllExport ExeHealth& operator =(
            ExeHealth&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExeHealth object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ExeHealth& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExeHealth object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ExeHealth& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const drdds::msg::MetaType& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            drdds::msg::MetaType&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const drdds::msg::MetaType& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport drdds::msg::MetaType& header();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const drdds::msg::ExeHealthValue& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            drdds::msg::ExeHealthValue&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const drdds::msg::ExeHealthValue& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport drdds::msg::ExeHealthValue& data();

private:

    drdds::msg::MetaType m_header;
    drdds::msg::ExeHealthValue m_data;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_EXEHEALTH_H_



