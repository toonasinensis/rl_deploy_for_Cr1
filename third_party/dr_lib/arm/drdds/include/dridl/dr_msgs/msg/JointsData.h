// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JointsData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_JOINTSDATA_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_JOINTSDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "MetaType.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(JOINTSDATA_SOURCE)
#define JOINTSDATA_DllAPI __declspec( dllexport )
#else
#define JOINTSDATA_DllAPI __declspec( dllimport )
#endif // JOINTSDATA_SOURCE
#else
#define JOINTSDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define JOINTSDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {



/*!
 * @brief This class represents the union MotionTempKp defined by the user in the IDL file.
 * @ingroup JointsData
 */
class MotionTempKp
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotionTempKp();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotionTempKp();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::MotionTempKp that will be copied.
     */
    eProsima_user_DllExport MotionTempKp(
            const MotionTempKp& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::MotionTempKp that will be copied.
     */
    eProsima_user_DllExport MotionTempKp(
            MotionTempKp&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::MotionTempKp that will be copied.
     */
    eProsima_user_DllExport MotionTempKp& operator =(
            const MotionTempKp& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::MotionTempKp that will be copied.
     */
    eProsima_user_DllExport MotionTempKp& operator =(
            MotionTempKp&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionTempKp object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotionTempKp& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionTempKp object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotionTempKp& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function sets a value in member motion_temp
     * @param _motion_temp New value for member motion_temp
     */
    eProsima_user_DllExport void motion_temp(
            float _motion_temp);

    /*!
     * @brief This function returns the value of member motion_temp
     * @return Value of member motion_temp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float motion_temp() const;

    /*!
     * @brief This function returns a reference to member motion_temp
     * @return Reference to member motion_temp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& motion_temp();


    /*!
     * @brief This function sets a value in member kp
     * @param _kp New value for member kp
     */
    eProsima_user_DllExport void kp(
            float _kp);

    /*!
     * @brief This function returns the value of member kp
     * @return Value of member kp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float kp() const;

    /*!
     * @brief This function returns a reference to member kp
     * @return Reference to member kp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& kp();

private:

    int32_t m__d;

    float m_motion_temp{0.0};
    float m_kp{0.0};
};


/*!
 * @brief This class represents the union DriverTempKd defined by the user in the IDL file.
 * @ingroup JointsData
 */
class DriverTempKd
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DriverTempKd();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DriverTempKd();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::DriverTempKd that will be copied.
     */
    eProsima_user_DllExport DriverTempKd(
            const DriverTempKd& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::DriverTempKd that will be copied.
     */
    eProsima_user_DllExport DriverTempKd(
            DriverTempKd&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::DriverTempKd that will be copied.
     */
    eProsima_user_DllExport DriverTempKd& operator =(
            const DriverTempKd& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::DriverTempKd that will be copied.
     */
    eProsima_user_DllExport DriverTempKd& operator =(
            DriverTempKd&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::DriverTempKd object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DriverTempKd& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::DriverTempKd object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DriverTempKd& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function sets a value in member driver_temp
     * @param _driver_temp New value for member driver_temp
     */
    eProsima_user_DllExport void driver_temp(
            float _driver_temp);

    /*!
     * @brief This function returns the value of member driver_temp
     * @return Value of member driver_temp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float driver_temp() const;

    /*!
     * @brief This function returns a reference to member driver_temp
     * @return Reference to member driver_temp
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& driver_temp();


    /*!
     * @brief This function sets a value in member kd
     * @param _kd New value for member kd
     */
    eProsima_user_DllExport void kd(
            float _kd);

    /*!
     * @brief This function returns the value of member kd
     * @return Value of member kd
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float kd() const;

    /*!
     * @brief This function returns a reference to member kd
     * @return Reference to member kd
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& kd();

private:

    int32_t m__d;

    float m_driver_temp{0.0};
    float m_kd{0.0};
};


/*!
 * @brief This class represents the structure JointData defined by the user in the IDL file.
 * @ingroup JointsData
 */
class JointData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport JointData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~JointData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::JointData that will be copied.
     */
    eProsima_user_DllExport JointData(
            const JointData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::JointData that will be copied.
     */
    eProsima_user_DllExport JointData(
            JointData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::JointData that will be copied.
     */
    eProsima_user_DllExport JointData& operator =(
            const JointData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::JointData that will be copied.
     */
    eProsima_user_DllExport JointData& operator =(
            JointData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::JointData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const JointData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::JointData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const JointData& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function sets a value in member data_id
     * @param _data_id New value for member data_id
     */
    eProsima_user_DllExport void data_id(
            uint16_t _data_id);

    /*!
     * @brief This function returns the value of member data_id
     * @return Value of member data_id
     */
    eProsima_user_DllExport uint16_t data_id() const;

    /*!
     * @brief This function returns a reference to member data_id
     * @return Reference to member data_id
     */
    eProsima_user_DllExport uint16_t& data_id();


    /*!
     * @brief This function sets a value in member status_word
     * @param _status_word New value for member status_word
     */
    eProsima_user_DllExport void status_word(
            uint16_t _status_word);

    /*!
     * @brief This function returns the value of member status_word
     * @return Value of member status_word
     */
    eProsima_user_DllExport uint16_t status_word() const;

    /*!
     * @brief This function returns a reference to member status_word
     * @return Reference to member status_word
     */
    eProsima_user_DllExport uint16_t& status_word();


    /*!
     * @brief This function sets a value in member control_word
     * @param _control_word New value for member control_word
     */
    eProsima_user_DllExport void control_word(
            uint16_t _control_word);

    /*!
     * @brief This function returns the value of member control_word
     * @return Value of member control_word
     */
    eProsima_user_DllExport uint16_t control_word() const;

    /*!
     * @brief This function returns a reference to member control_word
     * @return Reference to member control_word
     */
    eProsima_user_DllExport uint16_t& control_word();


    /*!
     * @brief This function sets a value in member position
     * @param _position New value for member position
     */
    eProsima_user_DllExport void position(
            float _position);

    /*!
     * @brief This function returns the value of member position
     * @return Value of member position
     */
    eProsima_user_DllExport float position() const;

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport float& position();


    /*!
     * @brief This function sets a value in member torque
     * @param _torque New value for member torque
     */
    eProsima_user_DllExport void torque(
            float _torque);

    /*!
     * @brief This function returns the value of member torque
     * @return Value of member torque
     */
    eProsima_user_DllExport float torque() const;

    /*!
     * @brief This function returns a reference to member torque
     * @return Reference to member torque
     */
    eProsima_user_DllExport float& torque();


    /*!
     * @brief This function sets a value in member velocity
     * @param _velocity New value for member velocity
     */
    eProsima_user_DllExport void velocity(
            float _velocity);

    /*!
     * @brief This function returns the value of member velocity
     * @return Value of member velocity
     */
    eProsima_user_DllExport float velocity() const;

    /*!
     * @brief This function returns a reference to member velocity
     * @return Reference to member velocity
     */
    eProsima_user_DllExport float& velocity();


    /*!
     * @brief This function copies the value in member motion_temp_kp
     * @param _motion_temp_kp New value to be copied in member motion_temp_kp
     */
    eProsima_user_DllExport void motion_temp_kp(
            const drdds::msg::MotionTempKp& _motion_temp_kp);

    /*!
     * @brief This function moves the value in member motion_temp_kp
     * @param _motion_temp_kp New value to be moved in member motion_temp_kp
     */
    eProsima_user_DllExport void motion_temp_kp(
            drdds::msg::MotionTempKp&& _motion_temp_kp);

    /*!
     * @brief This function returns a constant reference to member motion_temp_kp
     * @return Constant reference to member motion_temp_kp
     */
    eProsima_user_DllExport const drdds::msg::MotionTempKp& motion_temp_kp() const;

    /*!
     * @brief This function returns a reference to member motion_temp_kp
     * @return Reference to member motion_temp_kp
     */
    eProsima_user_DllExport drdds::msg::MotionTempKp& motion_temp_kp();


    /*!
     * @brief This function copies the value in member driver_temp_kd
     * @param _driver_temp_kd New value to be copied in member driver_temp_kd
     */
    eProsima_user_DllExport void driver_temp_kd(
            const drdds::msg::DriverTempKd& _driver_temp_kd);

    /*!
     * @brief This function moves the value in member driver_temp_kd
     * @param _driver_temp_kd New value to be moved in member driver_temp_kd
     */
    eProsima_user_DllExport void driver_temp_kd(
            drdds::msg::DriverTempKd&& _driver_temp_kd);

    /*!
     * @brief This function returns a constant reference to member driver_temp_kd
     * @return Constant reference to member driver_temp_kd
     */
    eProsima_user_DllExport const drdds::msg::DriverTempKd& driver_temp_kd() const;

    /*!
     * @brief This function returns a reference to member driver_temp_kd
     * @return Reference to member driver_temp_kd
     */
    eProsima_user_DllExport drdds::msg::DriverTempKd& driver_temp_kd();

private:

    std::string m_name;
    uint16_t m_data_id{0};
    uint16_t m_status_word{0};
    uint16_t m_control_word{0};
    float m_position{0.0};
    float m_torque{0.0};
    float m_velocity{0.0};
    drdds::msg::MotionTempKp m_motion_temp_kp;
    drdds::msg::DriverTempKd m_driver_temp_kd;

};




/*!
 * @brief This class represents the structure JointsDataValue defined by the user in the IDL file.
 * @ingroup JointsData
 */
class JointsDataValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport JointsDataValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~JointsDataValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::JointsDataValue that will be copied.
     */
    eProsima_user_DllExport JointsDataValue(
            const JointsDataValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::JointsDataValue that will be copied.
     */
    eProsima_user_DllExport JointsDataValue(
            JointsDataValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::JointsDataValue that will be copied.
     */
    eProsima_user_DllExport JointsDataValue& operator =(
            const JointsDataValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::JointsDataValue that will be copied.
     */
    eProsima_user_DllExport JointsDataValue& operator =(
            JointsDataValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::JointsDataValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const JointsDataValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::JointsDataValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const JointsDataValue& x) const;

    /*!
     * @brief This function copies the value in member joints_data
     * @param _joints_data New value to be copied in member joints_data
     */
    eProsima_user_DllExport void joints_data(
            const std::vector<drdds::msg::JointData>& _joints_data);

    /*!
     * @brief This function moves the value in member joints_data
     * @param _joints_data New value to be moved in member joints_data
     */
    eProsima_user_DllExport void joints_data(
            std::vector<drdds::msg::JointData>&& _joints_data);

    /*!
     * @brief This function returns a constant reference to member joints_data
     * @return Constant reference to member joints_data
     */
    eProsima_user_DllExport const std::vector<drdds::msg::JointData>& joints_data() const;

    /*!
     * @brief This function returns a reference to member joints_data
     * @return Reference to member joints_data
     */
    eProsima_user_DllExport std::vector<drdds::msg::JointData>& joints_data();

private:

    std::vector<drdds::msg::JointData> m_joints_data;

};


/*!
 * @brief This class represents the structure JointsData defined by the user in the IDL file.
 * @ingroup JointsData
 */
class JointsData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport JointsData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~JointsData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::JointsData that will be copied.
     */
    eProsima_user_DllExport JointsData(
            const JointsData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::JointsData that will be copied.
     */
    eProsima_user_DllExport JointsData(
            JointsData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::JointsData that will be copied.
     */
    eProsima_user_DllExport JointsData& operator =(
            const JointsData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::JointsData that will be copied.
     */
    eProsima_user_DllExport JointsData& operator =(
            JointsData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::JointsData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const JointsData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::JointsData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const JointsData& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const drdds::msg::MetaType& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            drdds::msg::MetaType&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const drdds::msg::MetaType& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport drdds::msg::MetaType& header();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const drdds::msg::JointsDataValue& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            drdds::msg::JointsDataValue&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const drdds::msg::JointsDataValue& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport drdds::msg::JointsDataValue& data();

private:

    drdds::msg::MetaType m_header;
    drdds::msg::JointsDataValue m_data;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_JOINTSDATA_H_



