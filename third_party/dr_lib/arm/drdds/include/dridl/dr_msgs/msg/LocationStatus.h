// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LocationStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_LOCATIONSTATUS_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_LOCATIONSTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "MetaType.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LOCATIONSTATUS_SOURCE)
#define LOCATIONSTATUS_DllAPI __declspec( dllexport )
#else
#define LOCATIONSTATUS_DllAPI __declspec( dllimport )
#endif // LOCATIONSTATUS_SOURCE
#else
#define LOCATIONSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LOCATIONSTATUS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {



/*!
 * @brief This class represents the structure InputStatusValue defined by the user in the IDL file.
 * @ingroup LocationStatus
 */
class InputStatusValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InputStatusValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InputStatusValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::InputStatusValue that will be copied.
     */
    eProsima_user_DllExport InputStatusValue(
            const InputStatusValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::InputStatusValue that will be copied.
     */
    eProsima_user_DllExport InputStatusValue(
            InputStatusValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::InputStatusValue that will be copied.
     */
    eProsima_user_DllExport InputStatusValue& operator =(
            const InputStatusValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::InputStatusValue that will be copied.
     */
    eProsima_user_DllExport InputStatusValue& operator =(
            InputStatusValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::InputStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InputStatusValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::InputStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InputStatusValue& x) const;

    /*!
     * @brief This function sets a value in member lidar
     * @param _lidar New value for member lidar
     */
    eProsima_user_DllExport void lidar(
            uint8_t _lidar);

    /*!
     * @brief This function returns the value of member lidar
     * @return Value of member lidar
     */
    eProsima_user_DllExport uint8_t lidar() const;

    /*!
     * @brief This function returns a reference to member lidar
     * @return Reference to member lidar
     */
    eProsima_user_DllExport uint8_t& lidar();


    /*!
     * @brief This function sets a value in member imu
     * @param _imu New value for member imu
     */
    eProsima_user_DllExport void imu(
            uint8_t _imu);

    /*!
     * @brief This function returns the value of member imu
     * @return Value of member imu
     */
    eProsima_user_DllExport uint8_t imu() const;

    /*!
     * @brief This function returns a reference to member imu
     * @return Reference to member imu
     */
    eProsima_user_DllExport uint8_t& imu();


    /*!
     * @brief This function sets a value in member leg_odom
     * @param _leg_odom New value for member leg_odom
     */
    eProsima_user_DllExport void leg_odom(
            uint8_t _leg_odom);

    /*!
     * @brief This function returns the value of member leg_odom
     * @return Value of member leg_odom
     */
    eProsima_user_DllExport uint8_t leg_odom() const;

    /*!
     * @brief This function returns a reference to member leg_odom
     * @return Reference to member leg_odom
     */
    eProsima_user_DllExport uint8_t& leg_odom();


    /*!
     * @brief This function sets a value in member rtk
     * @param _rtk New value for member rtk
     */
    eProsima_user_DllExport void rtk(
            uint8_t _rtk);

    /*!
     * @brief This function returns the value of member rtk
     * @return Value of member rtk
     */
    eProsima_user_DllExport uint8_t rtk() const;

    /*!
     * @brief This function returns a reference to member rtk
     * @return Reference to member rtk
     */
    eProsima_user_DllExport uint8_t& rtk();


    /*!
     * @brief This function sets a value in member tag
     * @param _tag New value for member tag
     */
    eProsima_user_DllExport void tag(
            uint8_t _tag);

    /*!
     * @brief This function returns the value of member tag
     * @return Value of member tag
     */
    eProsima_user_DllExport uint8_t tag() const;

    /*!
     * @brief This function returns a reference to member tag
     * @return Reference to member tag
     */
    eProsima_user_DllExport uint8_t& tag();


    /*!
     * @brief This function sets a value in member reflective_strip
     * @param _reflective_strip New value for member reflective_strip
     */
    eProsima_user_DllExport void reflective_strip(
            uint8_t _reflective_strip);

    /*!
     * @brief This function returns the value of member reflective_strip
     * @return Value of member reflective_strip
     */
    eProsima_user_DllExport uint8_t reflective_strip() const;

    /*!
     * @brief This function returns a reference to member reflective_strip
     * @return Reference to member reflective_strip
     */
    eProsima_user_DllExport uint8_t& reflective_strip();

private:

    uint8_t m_lidar{0};
    uint8_t m_imu{0};
    uint8_t m_leg_odom{0};
    uint8_t m_rtk{0};
    uint8_t m_tag{0};
    uint8_t m_reflective_strip{0};

};


/*!
 * @brief This class represents the structure LossStatusValue defined by the user in the IDL file.
 * @ingroup LocationStatus
 */
class LossStatusValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LossStatusValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LossStatusValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::LossStatusValue that will be copied.
     */
    eProsima_user_DllExport LossStatusValue(
            const LossStatusValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::LossStatusValue that will be copied.
     */
    eProsima_user_DllExport LossStatusValue(
            LossStatusValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::LossStatusValue that will be copied.
     */
    eProsima_user_DllExport LossStatusValue& operator =(
            const LossStatusValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::LossStatusValue that will be copied.
     */
    eProsima_user_DllExport LossStatusValue& operator =(
            LossStatusValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LossStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LossStatusValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LossStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LossStatusValue& x) const;

    /*!
     * @brief This function sets a value in member odom_error
     * @param _odom_error New value for member odom_error
     */
    eProsima_user_DllExport void odom_error(
            uint8_t _odom_error);

    /*!
     * @brief This function returns the value of member odom_error
     * @return Value of member odom_error
     */
    eProsima_user_DllExport uint8_t odom_error() const;

    /*!
     * @brief This function returns a reference to member odom_error
     * @return Reference to member odom_error
     */
    eProsima_user_DllExport uint8_t& odom_error();


    /*!
     * @brief This function sets a value in member leg_odom_error
     * @param _leg_odom_error New value for member leg_odom_error
     */
    eProsima_user_DllExport void leg_odom_error(
            uint8_t _leg_odom_error);

    /*!
     * @brief This function returns the value of member leg_odom_error
     * @return Value of member leg_odom_error
     */
    eProsima_user_DllExport uint8_t leg_odom_error() const;

    /*!
     * @brief This function returns a reference to member leg_odom_error
     * @return Reference to member leg_odom_error
     */
    eProsima_user_DllExport uint8_t& leg_odom_error();


    /*!
     * @brief This function sets a value in member matching_error
     * @param _matching_error New value for member matching_error
     */
    eProsima_user_DllExport void matching_error(
            uint8_t _matching_error);

    /*!
     * @brief This function returns the value of member matching_error
     * @return Value of member matching_error
     */
    eProsima_user_DllExport uint8_t matching_error() const;

    /*!
     * @brief This function returns a reference to member matching_error
     * @return Reference to member matching_error
     */
    eProsima_user_DllExport uint8_t& matching_error();


    /*!
     * @brief This function sets a value in member pub_error
     * @param _pub_error New value for member pub_error
     */
    eProsima_user_DllExport void pub_error(
            uint8_t _pub_error);

    /*!
     * @brief This function returns the value of member pub_error
     * @return Value of member pub_error
     */
    eProsima_user_DllExport uint8_t pub_error() const;

    /*!
     * @brief This function returns a reference to member pub_error
     * @return Reference to member pub_error
     */
    eProsima_user_DllExport uint8_t& pub_error();

private:

    uint8_t m_odom_error{0};
    uint8_t m_leg_odom_error{0};
    uint8_t m_matching_error{0};
    uint8_t m_pub_error{0};

};


/*!
 * @brief This class represents the structure ExecStatusValue defined by the user in the IDL file.
 * @ingroup LocationStatus
 */
class ExecStatusValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ExecStatusValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ExecStatusValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::ExecStatusValue that will be copied.
     */
    eProsima_user_DllExport ExecStatusValue(
            const ExecStatusValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::ExecStatusValue that will be copied.
     */
    eProsima_user_DllExport ExecStatusValue(
            ExecStatusValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::ExecStatusValue that will be copied.
     */
    eProsima_user_DllExport ExecStatusValue& operator =(
            const ExecStatusValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::ExecStatusValue that will be copied.
     */
    eProsima_user_DllExport ExecStatusValue& operator =(
            ExecStatusValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExecStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ExecStatusValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::ExecStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ExecStatusValue& x) const;

    /*!
     * @brief This function sets a value in member overtime
     * @param _overtime New value for member overtime
     */
    eProsima_user_DllExport void overtime(
            uint8_t _overtime);

    /*!
     * @brief This function returns the value of member overtime
     * @return Value of member overtime
     */
    eProsima_user_DllExport uint8_t overtime() const;

    /*!
     * @brief This function returns a reference to member overtime
     * @return Reference to member overtime
     */
    eProsima_user_DllExport uint8_t& overtime();


    /*!
     * @brief This function sets a value in member numeric_error
     * @param _numeric_error New value for member numeric_error
     */
    eProsima_user_DllExport void numeric_error(
            uint8_t _numeric_error);

    /*!
     * @brief This function returns the value of member numeric_error
     * @return Value of member numeric_error
     */
    eProsima_user_DllExport uint8_t numeric_error() const;

    /*!
     * @brief This function returns a reference to member numeric_error
     * @return Reference to member numeric_error
     */
    eProsima_user_DllExport uint8_t& numeric_error();


    /*!
     * @brief This function sets a value in member timestamp_error
     * @param _timestamp_error New value for member timestamp_error
     */
    eProsima_user_DllExport void timestamp_error(
            uint8_t _timestamp_error);

    /*!
     * @brief This function returns the value of member timestamp_error
     * @return Value of member timestamp_error
     */
    eProsima_user_DllExport uint8_t timestamp_error() const;

    /*!
     * @brief This function returns a reference to member timestamp_error
     * @return Reference to member timestamp_error
     */
    eProsima_user_DllExport uint8_t& timestamp_error();

private:

    uint8_t m_overtime{0};
    uint8_t m_numeric_error{0};
    uint8_t m_timestamp_error{0};

};


/*!
 * @brief This class represents the structure LocationStatusValue defined by the user in the IDL file.
 * @ingroup LocationStatus
 */
class LocationStatusValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LocationStatusValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LocationStatusValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::LocationStatusValue that will be copied.
     */
    eProsima_user_DllExport LocationStatusValue(
            const LocationStatusValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::LocationStatusValue that will be copied.
     */
    eProsima_user_DllExport LocationStatusValue(
            LocationStatusValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::LocationStatusValue that will be copied.
     */
    eProsima_user_DllExport LocationStatusValue& operator =(
            const LocationStatusValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::LocationStatusValue that will be copied.
     */
    eProsima_user_DllExport LocationStatusValue& operator =(
            LocationStatusValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LocationStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LocationStatusValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LocationStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LocationStatusValue& x) const;

    /*!
     * @brief This function sets a value in member total_status
     * @param _total_status New value for member total_status
     */
    eProsima_user_DllExport void total_status(
            uint8_t _total_status);

    /*!
     * @brief This function returns the value of member total_status
     * @return Value of member total_status
     */
    eProsima_user_DllExport uint8_t total_status() const;

    /*!
     * @brief This function returns a reference to member total_status
     * @return Reference to member total_status
     */
    eProsima_user_DllExport uint8_t& total_status();


    /*!
     * @brief This function copies the value in member exec_val
     * @param _exec_val New value to be copied in member exec_val
     */
    eProsima_user_DllExport void exec_val(
            const drdds::msg::ExecStatusValue& _exec_val);

    /*!
     * @brief This function moves the value in member exec_val
     * @param _exec_val New value to be moved in member exec_val
     */
    eProsima_user_DllExport void exec_val(
            drdds::msg::ExecStatusValue&& _exec_val);

    /*!
     * @brief This function returns a constant reference to member exec_val
     * @return Constant reference to member exec_val
     */
    eProsima_user_DllExport const drdds::msg::ExecStatusValue& exec_val() const;

    /*!
     * @brief This function returns a reference to member exec_val
     * @return Reference to member exec_val
     */
    eProsima_user_DllExport drdds::msg::ExecStatusValue& exec_val();


    /*!
     * @brief This function copies the value in member loss_val
     * @param _loss_val New value to be copied in member loss_val
     */
    eProsima_user_DllExport void loss_val(
            const drdds::msg::LossStatusValue& _loss_val);

    /*!
     * @brief This function moves the value in member loss_val
     * @param _loss_val New value to be moved in member loss_val
     */
    eProsima_user_DllExport void loss_val(
            drdds::msg::LossStatusValue&& _loss_val);

    /*!
     * @brief This function returns a constant reference to member loss_val
     * @return Constant reference to member loss_val
     */
    eProsima_user_DllExport const drdds::msg::LossStatusValue& loss_val() const;

    /*!
     * @brief This function returns a reference to member loss_val
     * @return Reference to member loss_val
     */
    eProsima_user_DllExport drdds::msg::LossStatusValue& loss_val();


    /*!
     * @brief This function copies the value in member input_val
     * @param _input_val New value to be copied in member input_val
     */
    eProsima_user_DllExport void input_val(
            const drdds::msg::InputStatusValue& _input_val);

    /*!
     * @brief This function moves the value in member input_val
     * @param _input_val New value to be moved in member input_val
     */
    eProsima_user_DllExport void input_val(
            drdds::msg::InputStatusValue&& _input_val);

    /*!
     * @brief This function returns a constant reference to member input_val
     * @return Constant reference to member input_val
     */
    eProsima_user_DllExport const drdds::msg::InputStatusValue& input_val() const;

    /*!
     * @brief This function returns a reference to member input_val
     * @return Reference to member input_val
     */
    eProsima_user_DllExport drdds::msg::InputStatusValue& input_val();

private:

    uint8_t m_total_status{0};
    drdds::msg::ExecStatusValue m_exec_val;
    drdds::msg::LossStatusValue m_loss_val;
    drdds::msg::InputStatusValue m_input_val;

};


/*!
 * @brief This class represents the structure LocationStatus defined by the user in the IDL file.
 * @ingroup LocationStatus
 */
class LocationStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LocationStatus();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LocationStatus();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::LocationStatus that will be copied.
     */
    eProsima_user_DllExport LocationStatus(
            const LocationStatus& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::LocationStatus that will be copied.
     */
    eProsima_user_DllExport LocationStatus(
            LocationStatus&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::LocationStatus that will be copied.
     */
    eProsima_user_DllExport LocationStatus& operator =(
            const LocationStatus& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::LocationStatus that will be copied.
     */
    eProsima_user_DllExport LocationStatus& operator =(
            LocationStatus&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LocationStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LocationStatus& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LocationStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LocationStatus& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const drdds::msg::MetaType& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            drdds::msg::MetaType&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const drdds::msg::MetaType& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport drdds::msg::MetaType& header();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const drdds::msg::LocationStatusValue& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            drdds::msg::LocationStatusValue&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const drdds::msg::LocationStatusValue& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport drdds::msg::LocationStatusValue& data();

private:

    drdds::msg::MetaType m_header;
    drdds::msg::LocationStatusValue m_data;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_LOCATIONSTATUS_H_



