// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MetaType.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_METATYPE_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_METATYPE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(METATYPE_SOURCE)
#define METATYPE_DllAPI __declspec( dllexport )
#else
#define METATYPE_DllAPI __declspec( dllimport )
#endif // METATYPE_SOURCE
#else
#define METATYPE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define METATYPE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {



/*!
 * @brief This class represents the structure Timestamp defined by the user in the IDL file.
 * @ingroup MetaType
 */
class Timestamp
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Timestamp();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Timestamp();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp(
            const Timestamp& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp(
            Timestamp&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp& operator =(
            const Timestamp& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp& operator =(
            Timestamp&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::Timestamp object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Timestamp& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::Timestamp object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Timestamp& x) const;

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();


    /*!
     * @brief This function sets a value in member nsec
     * @param _nsec New value for member nsec
     */
    eProsima_user_DllExport void nsec(
            uint32_t _nsec);

    /*!
     * @brief This function returns the value of member nsec
     * @return Value of member nsec
     */
    eProsima_user_DllExport uint32_t nsec() const;

    /*!
     * @brief This function returns a reference to member nsec
     * @return Reference to member nsec
     */
    eProsima_user_DllExport uint32_t& nsec();

private:

    int32_t m_sec{0};
    uint32_t m_nsec{0};

};


/*!
 * @brief This class represents the structure MetaType defined by the user in the IDL file.
 * @ingroup MetaType
 */
class MetaType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MetaType();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MetaType();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::MetaType that will be copied.
     */
    eProsima_user_DllExport MetaType(
            const MetaType& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::MetaType that will be copied.
     */
    eProsima_user_DllExport MetaType(
            MetaType&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::MetaType that will be copied.
     */
    eProsima_user_DllExport MetaType& operator =(
            const MetaType& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::MetaType that will be copied.
     */
    eProsima_user_DllExport MetaType& operator =(
            MetaType&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MetaType object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MetaType& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MetaType object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MetaType& x) const;

    /*!
     * @brief This function sets a value in member type_version
     * @param _type_version New value for member type_version
     */
    eProsima_user_DllExport void type_version(
            uint8_t _type_version);

    /*!
     * @brief This function returns the value of member type_version
     * @return Value of member type_version
     */
    eProsima_user_DllExport uint8_t type_version() const;

    /*!
     * @brief This function returns a reference to member type_version
     * @return Reference to member type_version
     */
    eProsima_user_DllExport uint8_t& type_version();


    /*!
     * @brief This function sets a value in member robot_id
     * @param _robot_id New value for member robot_id
     */
    eProsima_user_DllExport void robot_id(
            uint16_t _robot_id);

    /*!
     * @brief This function returns the value of member robot_id
     * @return Value of member robot_id
     */
    eProsima_user_DllExport uint16_t robot_id() const;

    /*!
     * @brief This function returns a reference to member robot_id
     * @return Reference to member robot_id
     */
    eProsima_user_DllExport uint16_t& robot_id();


    /*!
     * @brief This function copies the value in member robot_sn
     * @param _robot_sn New value to be copied in member robot_sn
     */
    eProsima_user_DllExport void robot_sn(
            const std::string& _robot_sn);

    /*!
     * @brief This function moves the value in member robot_sn
     * @param _robot_sn New value to be moved in member robot_sn
     */
    eProsima_user_DllExport void robot_sn(
            std::string&& _robot_sn);

    /*!
     * @brief This function returns a constant reference to member robot_sn
     * @return Constant reference to member robot_sn
     */
    eProsima_user_DllExport const std::string& robot_sn() const;

    /*!
     * @brief This function returns a reference to member robot_sn
     * @return Reference to member robot_sn
     */
    eProsima_user_DllExport std::string& robot_sn();


    /*!
     * @brief This function sets a value in member app_id
     * @param _app_id New value for member app_id
     */
    eProsima_user_DllExport void app_id(
            uint8_t _app_id);

    /*!
     * @brief This function returns the value of member app_id
     * @return Value of member app_id
     */
    eProsima_user_DllExport uint8_t app_id() const;

    /*!
     * @brief This function returns a reference to member app_id
     * @return Reference to member app_id
     */
    eProsima_user_DllExport uint8_t& app_id();


    /*!
     * @brief This function copies the value in member app_name
     * @param _app_name New value to be copied in member app_name
     */
    eProsima_user_DllExport void app_name(
            const std::string& _app_name);

    /*!
     * @brief This function moves the value in member app_name
     * @param _app_name New value to be moved in member app_name
     */
    eProsima_user_DllExport void app_name(
            std::string&& _app_name);

    /*!
     * @brief This function returns a constant reference to member app_name
     * @return Constant reference to member app_name
     */
    eProsima_user_DllExport const std::string& app_name() const;

    /*!
     * @brief This function returns a reference to member app_name
     * @return Reference to member app_name
     */
    eProsima_user_DllExport std::string& app_name();


    /*!
     * @brief This function sets a value in member module_id
     * @param _module_id New value for member module_id
     */
    eProsima_user_DllExport void module_id(
            uint8_t _module_id);

    /*!
     * @brief This function returns the value of member module_id
     * @return Value of member module_id
     */
    eProsima_user_DllExport uint8_t module_id() const;

    /*!
     * @brief This function returns a reference to member module_id
     * @return Reference to member module_id
     */
    eProsima_user_DllExport uint8_t& module_id();


    /*!
     * @brief This function copies the value in member module_name
     * @param _module_name New value to be copied in member module_name
     */
    eProsima_user_DllExport void module_name(
            const std::string& _module_name);

    /*!
     * @brief This function moves the value in member module_name
     * @param _module_name New value to be moved in member module_name
     */
    eProsima_user_DllExport void module_name(
            std::string&& _module_name);

    /*!
     * @brief This function returns a constant reference to member module_name
     * @return Constant reference to member module_name
     */
    eProsima_user_DllExport const std::string& module_name() const;

    /*!
     * @brief This function returns a reference to member module_name
     * @return Reference to member module_name
     */
    eProsima_user_DllExport std::string& module_name();


    /*!
     * @brief This function sets a value in member frame_id
     * @param _frame_id New value for member frame_id
     */
    eProsima_user_DllExport void frame_id(
            uint64_t _frame_id);

    /*!
     * @brief This function returns the value of member frame_id
     * @return Value of member frame_id
     */
    eProsima_user_DllExport uint64_t frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport uint64_t& frame_id();


    /*!
     * @brief This function copies the value in member timestamp
     * @param _timestamp New value to be copied in member timestamp
     */
    eProsima_user_DllExport void timestamp(
            const drdds::msg::Timestamp& _timestamp);

    /*!
     * @brief This function moves the value in member timestamp
     * @param _timestamp New value to be moved in member timestamp
     */
    eProsima_user_DllExport void timestamp(
            drdds::msg::Timestamp&& _timestamp);

    /*!
     * @brief This function returns a constant reference to member timestamp
     * @return Constant reference to member timestamp
     */
    eProsima_user_DllExport const drdds::msg::Timestamp& timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport drdds::msg::Timestamp& timestamp();

private:

    uint8_t m_type_version{0};
    uint16_t m_robot_id{0};
    std::string m_robot_sn;
    uint8_t m_app_id{0};
    std::string m_app_name;
    uint8_t m_module_id{0};
    std::string m_module_name;
    uint64_t m_frame_id{0};
    drdds::msg::Timestamp m_timestamp;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_METATYPE_H_



