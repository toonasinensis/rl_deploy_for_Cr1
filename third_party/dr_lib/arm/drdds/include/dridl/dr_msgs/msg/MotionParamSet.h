// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MotionParamSet.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_MOTIONPARAMSET_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_MOTIONPARAMSET_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "MetaType.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MOTIONPARAMSET_SOURCE)
#define MOTIONPARAMSET_DllAPI __declspec( dllexport )
#else
#define MOTIONPARAMSET_DllAPI __declspec( dllimport )
#endif // MOTIONPARAMSET_SOURCE
#else
#define MOTIONPARAMSET_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MOTIONPARAMSET_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {



/*!
 * @brief This class represents the structure LoadConfig defined by the user in the IDL file.
 * @ingroup MotionParamSet
 */
class LoadConfig
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LoadConfig();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LoadConfig();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::LoadConfig that will be copied.
     */
    eProsima_user_DllExport LoadConfig(
            const LoadConfig& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::LoadConfig that will be copied.
     */
    eProsima_user_DllExport LoadConfig(
            LoadConfig&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::LoadConfig that will be copied.
     */
    eProsima_user_DllExport LoadConfig& operator =(
            const LoadConfig& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::LoadConfig that will be copied.
     */
    eProsima_user_DllExport LoadConfig& operator =(
            LoadConfig&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LoadConfig object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LoadConfig& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::LoadConfig object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LoadConfig& x) const;

    /*!
     * @brief This function sets a value in member is_enable
     * @param _is_enable New value for member is_enable
     */
    eProsima_user_DllExport void is_enable(
            bool _is_enable);

    /*!
     * @brief This function returns the value of member is_enable
     * @return Value of member is_enable
     */
    eProsima_user_DllExport bool is_enable() const;

    /*!
     * @brief This function returns a reference to member is_enable
     * @return Reference to member is_enable
     */
    eProsima_user_DllExport bool& is_enable();


    /*!
     * @brief This function sets a value in member load
     * @param _load New value for member load
     */
    eProsima_user_DllExport void load(
            float _load);

    /*!
     * @brief This function returns the value of member load
     * @return Value of member load
     */
    eProsima_user_DllExport float load() const;

    /*!
     * @brief This function returns a reference to member load
     * @return Reference to member load
     */
    eProsima_user_DllExport float& load();


    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            float _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport float x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport float& x();


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            float _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport float y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport float& y();


    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            float _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport float z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport float& z();

private:

    bool m_is_enable{false};
    float m_load{0.0};
    float m_x{0.0};
    float m_y{0.0};
    float m_z{0.0};

};


/*!
 * @brief This class represents the structure MotionParamSetValue defined by the user in the IDL file.
 * @ingroup MotionParamSet
 */
class MotionParamSetValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotionParamSetValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotionParamSetValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::MotionParamSetValue that will be copied.
     */
    eProsima_user_DllExport MotionParamSetValue(
            const MotionParamSetValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::MotionParamSetValue that will be copied.
     */
    eProsima_user_DllExport MotionParamSetValue(
            MotionParamSetValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::MotionParamSetValue that will be copied.
     */
    eProsima_user_DllExport MotionParamSetValue& operator =(
            const MotionParamSetValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::MotionParamSetValue that will be copied.
     */
    eProsima_user_DllExport MotionParamSetValue& operator =(
            MotionParamSetValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionParamSetValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotionParamSetValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionParamSetValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotionParamSetValue& x) const;

    /*!
     * @brief This function sets a value in member operating_mode
     * @param _operating_mode New value for member operating_mode
     */
    eProsima_user_DllExport void operating_mode(
            int32_t _operating_mode);

    /*!
     * @brief This function returns the value of member operating_mode
     * @return Value of member operating_mode
     */
    eProsima_user_DllExport int32_t operating_mode() const;

    /*!
     * @brief This function returns a reference to member operating_mode
     * @return Reference to member operating_mode
     */
    eProsima_user_DllExport int32_t& operating_mode();


    /*!
     * @brief This function copies the value in member load_config
     * @param _load_config New value to be copied in member load_config
     */
    eProsima_user_DllExport void load_config(
            const drdds::msg::LoadConfig& _load_config);

    /*!
     * @brief This function moves the value in member load_config
     * @param _load_config New value to be moved in member load_config
     */
    eProsima_user_DllExport void load_config(
            drdds::msg::LoadConfig&& _load_config);

    /*!
     * @brief This function returns a constant reference to member load_config
     * @return Constant reference to member load_config
     */
    eProsima_user_DllExport const drdds::msg::LoadConfig& load_config() const;

    /*!
     * @brief This function returns a reference to member load_config
     * @return Reference to member load_config
     */
    eProsima_user_DllExport drdds::msg::LoadConfig& load_config();


    /*!
     * @brief This function sets a value in member charge_signal
     * @param _charge_signal New value for member charge_signal
     */
    eProsima_user_DllExport void charge_signal(
            uint8_t _charge_signal);

    /*!
     * @brief This function returns the value of member charge_signal
     * @return Value of member charge_signal
     */
    eProsima_user_DllExport uint8_t charge_signal() const;

    /*!
     * @brief This function returns a reference to member charge_signal
     * @return Reference to member charge_signal
     */
    eProsima_user_DllExport uint8_t& charge_signal();


    /*!
     * @brief This function sets a value in member creeping_mode
     * @param _creeping_mode New value for member creeping_mode
     */
    eProsima_user_DllExport void creeping_mode(
            uint8_t _creeping_mode);

    /*!
     * @brief This function returns the value of member creeping_mode
     * @return Value of member creeping_mode
     */
    eProsima_user_DllExport uint8_t creeping_mode() const;

    /*!
     * @brief This function returns a reference to member creeping_mode
     * @return Reference to member creeping_mode
     */
    eProsima_user_DllExport uint8_t& creeping_mode();


    /*!
     * @brief This function sets a value in member spread_leg
     * @param _spread_leg New value for member spread_leg
     */
    eProsima_user_DllExport void spread_leg(
            uint8_t _spread_leg);

    /*!
     * @brief This function returns the value of member spread_leg
     * @return Value of member spread_leg
     */
    eProsima_user_DllExport uint8_t spread_leg() const;

    /*!
     * @brief This function returns a reference to member spread_leg
     * @return Reference to member spread_leg
     */
    eProsima_user_DllExport uint8_t& spread_leg();

private:

    int32_t m_operating_mode{0};
    drdds::msg::LoadConfig m_load_config;
    uint8_t m_charge_signal{0};
    uint8_t m_creeping_mode{0};
    uint8_t m_spread_leg{0};

};


/*!
 * @brief This class represents the structure MotionParamSet defined by the user in the IDL file.
 * @ingroup MotionParamSet
 */
class MotionParamSet
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotionParamSet();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotionParamSet();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::MotionParamSet that will be copied.
     */
    eProsima_user_DllExport MotionParamSet(
            const MotionParamSet& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::MotionParamSet that will be copied.
     */
    eProsima_user_DllExport MotionParamSet(
            MotionParamSet&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::MotionParamSet that will be copied.
     */
    eProsima_user_DllExport MotionParamSet& operator =(
            const MotionParamSet& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::MotionParamSet that will be copied.
     */
    eProsima_user_DllExport MotionParamSet& operator =(
            MotionParamSet&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionParamSet object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotionParamSet& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionParamSet object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotionParamSet& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const drdds::msg::MetaType& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            drdds::msg::MetaType&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const drdds::msg::MetaType& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport drdds::msg::MetaType& header();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const drdds::msg::MotionParamSetValue& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            drdds::msg::MotionParamSetValue&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const drdds::msg::MotionParamSetValue& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport drdds::msg::MotionParamSetValue& data();

private:

    drdds::msg::MetaType m_header;
    drdds::msg::MotionParamSetValue m_data;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_MOTIONPARAMSET_H_



