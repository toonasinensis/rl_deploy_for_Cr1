// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MotionStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_MOTIONSTATUS_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_MOTIONSTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "AppStatus.h"
#include "Gait.h"
#include "MotionParamSet.h"
#include "MotionAction.h"
#include "MotionState.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MOTIONSTATUS_SOURCE)
#define MOTIONSTATUS_DllAPI __declspec( dllexport )
#else
#define MOTIONSTATUS_DllAPI __declspec( dllimport )
#endif // MOTIONSTATUS_SOURCE
#else
#define MOTIONSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MOTIONSTATUS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {



/*!
 * @brief This class represents the structure MotionStatusValue defined by the user in the IDL file.
 * @ingroup MotionStatus
 */
class MotionStatusValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotionStatusValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotionStatusValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::MotionStatusValue that will be copied.
     */
    eProsima_user_DllExport MotionStatusValue(
            const MotionStatusValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::MotionStatusValue that will be copied.
     */
    eProsima_user_DllExport MotionStatusValue(
            MotionStatusValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::MotionStatusValue that will be copied.
     */
    eProsima_user_DllExport MotionStatusValue& operator =(
            const MotionStatusValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::MotionStatusValue that will be copied.
     */
    eProsima_user_DllExport MotionStatusValue& operator =(
            MotionStatusValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotionStatusValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionStatusValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotionStatusValue& x) const;

    /*!
     * @brief This function sets a value in member max_forward_vel
     * @param _max_forward_vel New value for member max_forward_vel
     */
    eProsima_user_DllExport void max_forward_vel(
            float _max_forward_vel);

    /*!
     * @brief This function returns the value of member max_forward_vel
     * @return Value of member max_forward_vel
     */
    eProsima_user_DllExport float max_forward_vel() const;

    /*!
     * @brief This function returns a reference to member max_forward_vel
     * @return Reference to member max_forward_vel
     */
    eProsima_user_DllExport float& max_forward_vel();


    /*!
     * @brief This function sets a value in member max_backward_vel
     * @param _max_backward_vel New value for member max_backward_vel
     */
    eProsima_user_DllExport void max_backward_vel(
            float _max_backward_vel);

    /*!
     * @brief This function returns the value of member max_backward_vel
     * @return Value of member max_backward_vel
     */
    eProsima_user_DllExport float max_backward_vel() const;

    /*!
     * @brief This function returns a reference to member max_backward_vel
     * @return Reference to member max_backward_vel
     */
    eProsima_user_DllExport float& max_backward_vel();


    /*!
     * @brief This function sets a value in member actual_charge_signal
     * @param _actual_charge_signal New value for member actual_charge_signal
     */
    eProsima_user_DllExport void actual_charge_signal(
            uint8_t _actual_charge_signal);

    /*!
     * @brief This function returns the value of member actual_charge_signal
     * @return Value of member actual_charge_signal
     */
    eProsima_user_DllExport uint8_t actual_charge_signal() const;

    /*!
     * @brief This function returns a reference to member actual_charge_signal
     * @return Reference to member actual_charge_signal
     */
    eProsima_user_DllExport uint8_t& actual_charge_signal();


    /*!
     * @brief This function sets a value in member vel_x
     * @param _vel_x New value for member vel_x
     */
    eProsima_user_DllExport void vel_x(
            float _vel_x);

    /*!
     * @brief This function returns the value of member vel_x
     * @return Value of member vel_x
     */
    eProsima_user_DllExport float vel_x() const;

    /*!
     * @brief This function returns a reference to member vel_x
     * @return Reference to member vel_x
     */
    eProsima_user_DllExport float& vel_x();


    /*!
     * @brief This function sets a value in member vel_y
     * @param _vel_y New value for member vel_y
     */
    eProsima_user_DllExport void vel_y(
            float _vel_y);

    /*!
     * @brief This function returns the value of member vel_y
     * @return Value of member vel_y
     */
    eProsima_user_DllExport float vel_y() const;

    /*!
     * @brief This function returns a reference to member vel_y
     * @return Reference to member vel_y
     */
    eProsima_user_DllExport float& vel_y();


    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            float _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport float height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport float& height();


    /*!
     * @brief This function copies the value in member action_state
     * @param _action_state New value to be copied in member action_state
     */
    eProsima_user_DllExport void action_state(
            const drdds::msg::MotionActionValue& _action_state);

    /*!
     * @brief This function moves the value in member action_state
     * @param _action_state New value to be moved in member action_state
     */
    eProsima_user_DllExport void action_state(
            drdds::msg::MotionActionValue&& _action_state);

    /*!
     * @brief This function returns a constant reference to member action_state
     * @return Constant reference to member action_state
     */
    eProsima_user_DllExport const drdds::msg::MotionActionValue& action_state() const;

    /*!
     * @brief This function returns a reference to member action_state
     * @return Reference to member action_state
     */
    eProsima_user_DllExport drdds::msg::MotionActionValue& action_state();


    /*!
     * @brief This function copies the value in member motion_state
     * @param _motion_state New value to be copied in member motion_state
     */
    eProsima_user_DllExport void motion_state(
            const drdds::msg::MotionStateValue& _motion_state);

    /*!
     * @brief This function moves the value in member motion_state
     * @param _motion_state New value to be moved in member motion_state
     */
    eProsima_user_DllExport void motion_state(
            drdds::msg::MotionStateValue&& _motion_state);

    /*!
     * @brief This function returns a constant reference to member motion_state
     * @return Constant reference to member motion_state
     */
    eProsima_user_DllExport const drdds::msg::MotionStateValue& motion_state() const;

    /*!
     * @brief This function returns a reference to member motion_state
     * @return Reference to member motion_state
     */
    eProsima_user_DllExport drdds::msg::MotionStateValue& motion_state();


    /*!
     * @brief This function copies the value in member gait_state
     * @param _gait_state New value to be copied in member gait_state
     */
    eProsima_user_DllExport void gait_state(
            const drdds::msg::GaitValue& _gait_state);

    /*!
     * @brief This function moves the value in member gait_state
     * @param _gait_state New value to be moved in member gait_state
     */
    eProsima_user_DllExport void gait_state(
            drdds::msg::GaitValue&& _gait_state);

    /*!
     * @brief This function returns a constant reference to member gait_state
     * @return Constant reference to member gait_state
     */
    eProsima_user_DllExport const drdds::msg::GaitValue& gait_state() const;

    /*!
     * @brief This function returns a reference to member gait_state
     * @return Reference to member gait_state
     */
    eProsima_user_DllExport drdds::msg::GaitValue& gait_state();


    /*!
     * @brief This function copies the value in member motion_param_set
     * @param _motion_param_set New value to be copied in member motion_param_set
     */
    eProsima_user_DllExport void motion_param_set(
            const drdds::msg::MotionParamSetValue& _motion_param_set);

    /*!
     * @brief This function moves the value in member motion_param_set
     * @param _motion_param_set New value to be moved in member motion_param_set
     */
    eProsima_user_DllExport void motion_param_set(
            drdds::msg::MotionParamSetValue&& _motion_param_set);

    /*!
     * @brief This function returns a constant reference to member motion_param_set
     * @return Constant reference to member motion_param_set
     */
    eProsima_user_DllExport const drdds::msg::MotionParamSetValue& motion_param_set() const;

    /*!
     * @brief This function returns a reference to member motion_param_set
     * @return Reference to member motion_param_set
     */
    eProsima_user_DllExport drdds::msg::MotionParamSetValue& motion_param_set();


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const drdds::msg::AppStatusValue& _status);

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            drdds::msg::AppStatusValue&& _status);

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const drdds::msg::AppStatusValue& status() const;

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport drdds::msg::AppStatusValue& status();

private:

    float m_max_forward_vel{0.0};
    float m_max_backward_vel{0.0};
    uint8_t m_actual_charge_signal{0};
    float m_vel_x{0.0};
    float m_vel_y{0.0};
    float m_height{0.0};
    drdds::msg::MotionActionValue m_action_state;
    drdds::msg::MotionStateValue m_motion_state;
    drdds::msg::GaitValue m_gait_state;
    drdds::msg::MotionParamSetValue m_motion_param_set;
    drdds::msg::AppStatusValue m_status;

};


/*!
 * @brief This class represents the structure MotionStatus defined by the user in the IDL file.
 * @ingroup MotionStatus
 */
class MotionStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotionStatus();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotionStatus();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::MotionStatus that will be copied.
     */
    eProsima_user_DllExport MotionStatus(
            const MotionStatus& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::MotionStatus that will be copied.
     */
    eProsima_user_DllExport MotionStatus(
            MotionStatus&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::MotionStatus that will be copied.
     */
    eProsima_user_DllExport MotionStatus& operator =(
            const MotionStatus& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::MotionStatus that will be copied.
     */
    eProsima_user_DllExport MotionStatus& operator =(
            MotionStatus&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotionStatus& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::MotionStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotionStatus& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const drdds::msg::MetaType& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            drdds::msg::MetaType&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const drdds::msg::MetaType& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport drdds::msg::MetaType& header();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const drdds::msg::MotionStatusValue& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            drdds::msg::MotionStatusValue&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const drdds::msg::MotionStatusValue& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport drdds::msg::MotionStatusValue& data();

private:

    drdds::msg::MetaType m_header;
    drdds::msg::MotionStatusValue m_data;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_MOTIONSTATUS_H_



