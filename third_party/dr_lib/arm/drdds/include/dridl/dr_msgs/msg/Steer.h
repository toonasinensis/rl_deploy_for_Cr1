// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Steer.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_MSG_STEER_H_
#define _FAST_DDS_GENERATED_DRDDS_MSG_STEER_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "MetaType.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STEER_SOURCE)
#define STEER_DllAPI __declspec( dllexport )
#else
#define STEER_DllAPI __declspec( dllimport )
#endif // STEER_SOURCE
#else
#define STEER_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STEER_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace msg {



/*!
 * @brief This class represents the structure SteerValue defined by the user in the IDL file.
 * @ingroup Steer
 */
class SteerValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SteerValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SteerValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::SteerValue that will be copied.
     */
    eProsima_user_DllExport SteerValue(
            const SteerValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::SteerValue that will be copied.
     */
    eProsima_user_DllExport SteerValue(
            SteerValue&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::SteerValue that will be copied.
     */
    eProsima_user_DllExport SteerValue& operator =(
            const SteerValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::SteerValue that will be copied.
     */
    eProsima_user_DllExport SteerValue& operator =(
            SteerValue&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::SteerValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SteerValue& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::SteerValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SteerValue& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            float _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport float x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport float& x();


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            float _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport float y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport float& y();


    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            float _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport float z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport float& z();


    /*!
     * @brief This function sets a value in member roll
     * @param _roll New value for member roll
     */
    eProsima_user_DllExport void roll(
            float _roll);

    /*!
     * @brief This function returns the value of member roll
     * @return Value of member roll
     */
    eProsima_user_DllExport float roll() const;

    /*!
     * @brief This function returns a reference to member roll
     * @return Reference to member roll
     */
    eProsima_user_DllExport float& roll();


    /*!
     * @brief This function sets a value in member pitch
     * @param _pitch New value for member pitch
     */
    eProsima_user_DllExport void pitch(
            float _pitch);

    /*!
     * @brief This function returns the value of member pitch
     * @return Value of member pitch
     */
    eProsima_user_DllExport float pitch() const;

    /*!
     * @brief This function returns a reference to member pitch
     * @return Reference to member pitch
     */
    eProsima_user_DllExport float& pitch();


    /*!
     * @brief This function sets a value in member yaw
     * @param _yaw New value for member yaw
     */
    eProsima_user_DllExport void yaw(
            float _yaw);

    /*!
     * @brief This function returns the value of member yaw
     * @return Value of member yaw
     */
    eProsima_user_DllExport float yaw() const;

    /*!
     * @brief This function returns a reference to member yaw
     * @return Reference to member yaw
     */
    eProsima_user_DllExport float& yaw();

private:

    float m_x{0.0};
    float m_y{0.0};
    float m_z{0.0};
    float m_roll{0.0};
    float m_pitch{0.0};
    float m_yaw{0.0};

};


/*!
 * @brief This class represents the structure Steer defined by the user in the IDL file.
 * @ingroup Steer
 */
class Steer
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Steer();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Steer();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::msg::Steer that will be copied.
     */
    eProsima_user_DllExport Steer(
            const Steer& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::msg::Steer that will be copied.
     */
    eProsima_user_DllExport Steer(
            Steer&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::msg::Steer that will be copied.
     */
    eProsima_user_DllExport Steer& operator =(
            const Steer& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::msg::Steer that will be copied.
     */
    eProsima_user_DllExport Steer& operator =(
            Steer&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::Steer object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Steer& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::msg::Steer object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Steer& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const drdds::msg::MetaType& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            drdds::msg::MetaType&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const drdds::msg::MetaType& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport drdds::msg::MetaType& header();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const drdds::msg::SteerValue& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            drdds::msg::SteerValue&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const drdds::msg::SteerValue& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport drdds::msg::SteerValue& data();

private:

    drdds::msg::MetaType m_header;
    drdds::msg::SteerValue m_data;

};

} // namespace msg

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_MSG_STEER_H_



