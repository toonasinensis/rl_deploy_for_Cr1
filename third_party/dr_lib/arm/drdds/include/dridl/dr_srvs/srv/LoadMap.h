// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoadMap.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DRDDS_SRV_LOADMAP_H_
#define _FAST_DDS_GENERATED_DRDDS_SRV_LOADMAP_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LOADMAP_SOURCE)
#define LOADMAP_DllAPI __declspec( dllexport )
#else
#define LOADMAP_DllAPI __declspec( dllimport )
#endif // LOADMAP_SOURCE
#else
#define LOADMAP_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LOADMAP_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace drdds {

namespace srv {



/*!
 * @brief This class represents the structure LoadMap_Request defined by the user in the IDL file.
 * @ingroup LoadMap
 */
class LoadMap_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LoadMap_Request();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LoadMap_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::srv::LoadMap_Request that will be copied.
     */
    eProsima_user_DllExport LoadMap_Request(
            const LoadMap_Request& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::srv::LoadMap_Request that will be copied.
     */
    eProsima_user_DllExport LoadMap_Request(
            LoadMap_Request&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::srv::LoadMap_Request that will be copied.
     */
    eProsima_user_DllExport LoadMap_Request& operator =(
            const LoadMap_Request& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::srv::LoadMap_Request that will be copied.
     */
    eProsima_user_DllExport LoadMap_Request& operator =(
            LoadMap_Request&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::srv::LoadMap_Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LoadMap_Request& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::srv::LoadMap_Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LoadMap_Request& x) const;

    /*!
     * @brief This function copies the value in member map_url
     * @param _map_url New value to be copied in member map_url
     */
    eProsima_user_DllExport void map_url(
            const std::string& _map_url);

    /*!
     * @brief This function moves the value in member map_url
     * @param _map_url New value to be moved in member map_url
     */
    eProsima_user_DllExport void map_url(
            std::string&& _map_url);

    /*!
     * @brief This function returns a constant reference to member map_url
     * @return Constant reference to member map_url
     */
    eProsima_user_DllExport const std::string& map_url() const;

    /*!
     * @brief This function returns a reference to member map_url
     * @return Reference to member map_url
     */
    eProsima_user_DllExport std::string& map_url();

private:

    std::string m_map_url;

};
namespace LoadMap_Response_Constants {

const uint8_t RESULT_SUCCESS = 0;
const uint8_t RESULT_MAP_DOES_NOT_EXIST = 1;
const uint8_t RESULT_INVALID_MAP_DATA = 2;
const uint8_t RESULT_INVALID_MAP_METADATA = 3;
const uint8_t RESULT_UNDEFINED_FAILURE = 255;

} // namespace LoadMap_Response_Constants


/*!
 * @brief This class represents the structure LoadMap_Response defined by the user in the IDL file.
 * @ingroup LoadMap
 */
class LoadMap_Response
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LoadMap_Response();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LoadMap_Response();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object drdds::srv::LoadMap_Response that will be copied.
     */
    eProsima_user_DllExport LoadMap_Response(
            const LoadMap_Response& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object drdds::srv::LoadMap_Response that will be copied.
     */
    eProsima_user_DllExport LoadMap_Response(
            LoadMap_Response&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object drdds::srv::LoadMap_Response that will be copied.
     */
    eProsima_user_DllExport LoadMap_Response& operator =(
            const LoadMap_Response& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object drdds::srv::LoadMap_Response that will be copied.
     */
    eProsima_user_DllExport LoadMap_Response& operator =(
            LoadMap_Response&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x drdds::srv::LoadMap_Response object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LoadMap_Response& x) const;

    /*!
     * @brief Comparison operator.
     * @param x drdds::srv::LoadMap_Response object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LoadMap_Response& x) const;

    /*!
     * @brief This function sets a value in member result
     * @param _result New value for member result
     */
    eProsima_user_DllExport void result(
            uint8_t _result);

    /*!
     * @brief This function returns the value of member result
     * @return Value of member result
     */
    eProsima_user_DllExport uint8_t result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     */
    eProsima_user_DllExport uint8_t& result();

private:

    uint8_t m_result{0};

};

} // namespace srv

} // namespace drdds

#endif // _FAST_DDS_GENERATED_DRDDS_SRV_LOADMAP_H_



