// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file InteractiveMarkerControl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERCONTROL_H_
#define _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERCONTROL_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "geometry_msgs/msg/Quaternion.h"
#include "Marker.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(INTERACTIVEMARKERCONTROL_SOURCE)
#define INTERACTIVEMARKERCONTROL_DllAPI __declspec( dllexport )
#else
#define INTERACTIVEMARKERCONTROL_DllAPI __declspec( dllimport )
#endif // INTERACTIVEMARKERCONTROL_SOURCE
#else
#define INTERACTIVEMARKERCONTROL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define INTERACTIVEMARKERCONTROL_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace visualization_msgs {

namespace msg {

namespace InteractiveMarkerControl_Constants {

const uint8_t INHERIT = 0;
const uint8_t FIXED = 1;
const uint8_t VIEW_FACING = 2;
const uint8_t NONE = 0;
const uint8_t MENU = 1;
const uint8_t BUTTON = 2;
const uint8_t MOVE_AXIS = 3;
const uint8_t MOVE_PLANE = 4;
const uint8_t ROTATE_AXIS = 5;
const uint8_t MOVE_ROTATE = 6;
const uint8_t MOVE_3D = 7;
const uint8_t ROTATE_3D = 8;
const uint8_t MOVE_ROTATE_3D = 9;

} // namespace InteractiveMarkerControl_Constants


/*!
 * @brief This class represents the structure InteractiveMarkerControl defined by the user in the IDL file.
 * @ingroup InteractiveMarkerControl
 */
class InteractiveMarkerControl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InteractiveMarkerControl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InteractiveMarkerControl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerControl that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerControl(
            const InteractiveMarkerControl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerControl that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerControl(
            InteractiveMarkerControl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerControl that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerControl& operator =(
            const InteractiveMarkerControl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerControl that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerControl& operator =(
            InteractiveMarkerControl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::InteractiveMarkerControl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InteractiveMarkerControl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::InteractiveMarkerControl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InteractiveMarkerControl& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function copies the value in member orientation
     * @param _orientation New value to be copied in member orientation
     */
    eProsima_user_DllExport void orientation(
            const geometry_msgs::msg::Quaternion& _orientation);

    /*!
     * @brief This function moves the value in member orientation
     * @param _orientation New value to be moved in member orientation
     */
    eProsima_user_DllExport void orientation(
            geometry_msgs::msg::Quaternion&& _orientation);

    /*!
     * @brief This function returns a constant reference to member orientation
     * @return Constant reference to member orientation
     */
    eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

    /*!
     * @brief This function returns a reference to member orientation
     * @return Reference to member orientation
     */
    eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();


    /*!
     * @brief This function sets a value in member orientation_mode
     * @param _orientation_mode New value for member orientation_mode
     */
    eProsima_user_DllExport void orientation_mode(
            uint8_t _orientation_mode);

    /*!
     * @brief This function returns the value of member orientation_mode
     * @return Value of member orientation_mode
     */
    eProsima_user_DllExport uint8_t orientation_mode() const;

    /*!
     * @brief This function returns a reference to member orientation_mode
     * @return Reference to member orientation_mode
     */
    eProsima_user_DllExport uint8_t& orientation_mode();


    /*!
     * @brief This function sets a value in member interaction_mode
     * @param _interaction_mode New value for member interaction_mode
     */
    eProsima_user_DllExport void interaction_mode(
            uint8_t _interaction_mode);

    /*!
     * @brief This function returns the value of member interaction_mode
     * @return Value of member interaction_mode
     */
    eProsima_user_DllExport uint8_t interaction_mode() const;

    /*!
     * @brief This function returns a reference to member interaction_mode
     * @return Reference to member interaction_mode
     */
    eProsima_user_DllExport uint8_t& interaction_mode();


    /*!
     * @brief This function sets a value in member always_visible
     * @param _always_visible New value for member always_visible
     */
    eProsima_user_DllExport void always_visible(
            bool _always_visible);

    /*!
     * @brief This function returns the value of member always_visible
     * @return Value of member always_visible
     */
    eProsima_user_DllExport bool always_visible() const;

    /*!
     * @brief This function returns a reference to member always_visible
     * @return Reference to member always_visible
     */
    eProsima_user_DllExport bool& always_visible();


    /*!
     * @brief This function copies the value in member markers
     * @param _markers New value to be copied in member markers
     */
    eProsima_user_DllExport void markers(
            const std::vector<visualization_msgs::msg::Marker>& _markers);

    /*!
     * @brief This function moves the value in member markers
     * @param _markers New value to be moved in member markers
     */
    eProsima_user_DllExport void markers(
            std::vector<visualization_msgs::msg::Marker>&& _markers);

    /*!
     * @brief This function returns a constant reference to member markers
     * @return Constant reference to member markers
     */
    eProsima_user_DllExport const std::vector<visualization_msgs::msg::Marker>& markers() const;

    /*!
     * @brief This function returns a reference to member markers
     * @return Reference to member markers
     */
    eProsima_user_DllExport std::vector<visualization_msgs::msg::Marker>& markers();


    /*!
     * @brief This function sets a value in member independent_marker_orientation
     * @param _independent_marker_orientation New value for member independent_marker_orientation
     */
    eProsima_user_DllExport void independent_marker_orientation(
            bool _independent_marker_orientation);

    /*!
     * @brief This function returns the value of member independent_marker_orientation
     * @return Value of member independent_marker_orientation
     */
    eProsima_user_DllExport bool independent_marker_orientation() const;

    /*!
     * @brief This function returns a reference to member independent_marker_orientation
     * @return Reference to member independent_marker_orientation
     */
    eProsima_user_DllExport bool& independent_marker_orientation();


    /*!
     * @brief This function copies the value in member description
     * @param _description New value to be copied in member description
     */
    eProsima_user_DllExport void description(
            const std::string& _description);

    /*!
     * @brief This function moves the value in member description
     * @param _description New value to be moved in member description
     */
    eProsima_user_DllExport void description(
            std::string&& _description);

    /*!
     * @brief This function returns a constant reference to member description
     * @return Constant reference to member description
     */
    eProsima_user_DllExport const std::string& description() const;

    /*!
     * @brief This function returns a reference to member description
     * @return Reference to member description
     */
    eProsima_user_DllExport std::string& description();

private:

    std::string m_name;
    geometry_msgs::msg::Quaternion m_orientation;
    uint8_t m_orientation_mode{0};
    uint8_t m_interaction_mode{0};
    bool m_always_visible{false};
    std::vector<visualization_msgs::msg::Marker> m_markers;
    bool m_independent_marker_orientation{false};
    std::string m_description;

};

} // namespace msg

} // namespace visualization_msgs

#endif // _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERCONTROL_H_



