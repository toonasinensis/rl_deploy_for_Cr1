// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file InteractiveMarkerFeedback.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERFEEDBACK_H_
#define _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERFEEDBACK_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "geometry_msgs/msg/Point.h"
#include "std_msgs/msg/Header.h"
#include "geometry_msgs/msg/Pose.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(INTERACTIVEMARKERFEEDBACK_SOURCE)
#define INTERACTIVEMARKERFEEDBACK_DllAPI __declspec( dllexport )
#else
#define INTERACTIVEMARKERFEEDBACK_DllAPI __declspec( dllimport )
#endif // INTERACTIVEMARKERFEEDBACK_SOURCE
#else
#define INTERACTIVEMARKERFEEDBACK_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define INTERACTIVEMARKERFEEDBACK_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace visualization_msgs {

namespace msg {

namespace InteractiveMarkerFeedback_Constants {

const uint8_t KEEP_ALIVE = 0;
const uint8_t POSE_UPDATE = 1;
const uint8_t MENU_SELECT = 2;
const uint8_t BUTTON_CLICK = 3;
const uint8_t MOUSE_DOWN = 4;
const uint8_t MOUSE_UP = 5;

} // namespace InteractiveMarkerFeedback_Constants


/*!
 * @brief This class represents the structure InteractiveMarkerFeedback defined by the user in the IDL file.
 * @ingroup InteractiveMarkerFeedback
 */
class InteractiveMarkerFeedback
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InteractiveMarkerFeedback();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InteractiveMarkerFeedback();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerFeedback that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerFeedback(
            const InteractiveMarkerFeedback& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerFeedback that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerFeedback(
            InteractiveMarkerFeedback&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerFeedback that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerFeedback& operator =(
            const InteractiveMarkerFeedback& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerFeedback that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerFeedback& operator =(
            InteractiveMarkerFeedback&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::InteractiveMarkerFeedback object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InteractiveMarkerFeedback& x) const;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::InteractiveMarkerFeedback object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InteractiveMarkerFeedback& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs::msg::Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs::msg::Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs::msg::Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs::msg::Header& header();


    /*!
     * @brief This function copies the value in member client_id
     * @param _client_id New value to be copied in member client_id
     */
    eProsima_user_DllExport void client_id(
            const std::string& _client_id);

    /*!
     * @brief This function moves the value in member client_id
     * @param _client_id New value to be moved in member client_id
     */
    eProsima_user_DllExport void client_id(
            std::string&& _client_id);

    /*!
     * @brief This function returns a constant reference to member client_id
     * @return Constant reference to member client_id
     */
    eProsima_user_DllExport const std::string& client_id() const;

    /*!
     * @brief This function returns a reference to member client_id
     * @return Reference to member client_id
     */
    eProsima_user_DllExport std::string& client_id();


    /*!
     * @brief This function copies the value in member marker_name
     * @param _marker_name New value to be copied in member marker_name
     */
    eProsima_user_DllExport void marker_name(
            const std::string& _marker_name);

    /*!
     * @brief This function moves the value in member marker_name
     * @param _marker_name New value to be moved in member marker_name
     */
    eProsima_user_DllExport void marker_name(
            std::string&& _marker_name);

    /*!
     * @brief This function returns a constant reference to member marker_name
     * @return Constant reference to member marker_name
     */
    eProsima_user_DllExport const std::string& marker_name() const;

    /*!
     * @brief This function returns a reference to member marker_name
     * @return Reference to member marker_name
     */
    eProsima_user_DllExport std::string& marker_name();


    /*!
     * @brief This function copies the value in member control_name
     * @param _control_name New value to be copied in member control_name
     */
    eProsima_user_DllExport void control_name(
            const std::string& _control_name);

    /*!
     * @brief This function moves the value in member control_name
     * @param _control_name New value to be moved in member control_name
     */
    eProsima_user_DllExport void control_name(
            std::string&& _control_name);

    /*!
     * @brief This function returns a constant reference to member control_name
     * @return Constant reference to member control_name
     */
    eProsima_user_DllExport const std::string& control_name() const;

    /*!
     * @brief This function returns a reference to member control_name
     * @return Reference to member control_name
     */
    eProsima_user_DllExport std::string& control_name();


    /*!
     * @brief This function sets a value in member event_type
     * @param _event_type New value for member event_type
     */
    eProsima_user_DllExport void event_type(
            uint8_t _event_type);

    /*!
     * @brief This function returns the value of member event_type
     * @return Value of member event_type
     */
    eProsima_user_DllExport uint8_t event_type() const;

    /*!
     * @brief This function returns a reference to member event_type
     * @return Reference to member event_type
     */
    eProsima_user_DllExport uint8_t& event_type();


    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const geometry_msgs::msg::Pose& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            geometry_msgs::msg::Pose&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const geometry_msgs::msg::Pose& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport geometry_msgs::msg::Pose& pose();


    /*!
     * @brief This function sets a value in member menu_entry_id
     * @param _menu_entry_id New value for member menu_entry_id
     */
    eProsima_user_DllExport void menu_entry_id(
            uint32_t _menu_entry_id);

    /*!
     * @brief This function returns the value of member menu_entry_id
     * @return Value of member menu_entry_id
     */
    eProsima_user_DllExport uint32_t menu_entry_id() const;

    /*!
     * @brief This function returns a reference to member menu_entry_id
     * @return Reference to member menu_entry_id
     */
    eProsima_user_DllExport uint32_t& menu_entry_id();


    /*!
     * @brief This function copies the value in member mouse_point
     * @param _mouse_point New value to be copied in member mouse_point
     */
    eProsima_user_DllExport void mouse_point(
            const geometry_msgs::msg::Point& _mouse_point);

    /*!
     * @brief This function moves the value in member mouse_point
     * @param _mouse_point New value to be moved in member mouse_point
     */
    eProsima_user_DllExport void mouse_point(
            geometry_msgs::msg::Point&& _mouse_point);

    /*!
     * @brief This function returns a constant reference to member mouse_point
     * @return Constant reference to member mouse_point
     */
    eProsima_user_DllExport const geometry_msgs::msg::Point& mouse_point() const;

    /*!
     * @brief This function returns a reference to member mouse_point
     * @return Reference to member mouse_point
     */
    eProsima_user_DllExport geometry_msgs::msg::Point& mouse_point();


    /*!
     * @brief This function sets a value in member mouse_point_valid
     * @param _mouse_point_valid New value for member mouse_point_valid
     */
    eProsima_user_DllExport void mouse_point_valid(
            bool _mouse_point_valid);

    /*!
     * @brief This function returns the value of member mouse_point_valid
     * @return Value of member mouse_point_valid
     */
    eProsima_user_DllExport bool mouse_point_valid() const;

    /*!
     * @brief This function returns a reference to member mouse_point_valid
     * @return Reference to member mouse_point_valid
     */
    eProsima_user_DllExport bool& mouse_point_valid();

private:

    std_msgs::msg::Header m_header;
    std::string m_client_id;
    std::string m_marker_name;
    std::string m_control_name;
    uint8_t m_event_type{0};
    geometry_msgs::msg::Pose m_pose;
    uint32_t m_menu_entry_id{0};
    geometry_msgs::msg::Point m_mouse_point;
    bool m_mouse_point_valid{false};

};

} // namespace msg

} // namespace visualization_msgs

#endif // _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERFEEDBACK_H_



