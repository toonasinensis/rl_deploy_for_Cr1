// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Inertia.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_INERTIA_H_
#define _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_INERTIA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "Vector3.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(INERTIA_SOURCE)
#define INERTIA_DllAPI __declspec( dllexport )
#else
#define INERTIA_DllAPI __declspec( dllimport )
#endif // INERTIA_SOURCE
#else
#define INERTIA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define INERTIA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace geometry_msgs {

namespace msg {



/*!
 * @brief This class represents the structure Inertia defined by the user in the IDL file.
 * @ingroup Inertia
 */
class Inertia
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Inertia();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Inertia();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
     */
    eProsima_user_DllExport Inertia(
            const Inertia& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
     */
    eProsima_user_DllExport Inertia(
            Inertia&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
     */
    eProsima_user_DllExport Inertia& operator =(
            const Inertia& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs::msg::Inertia that will be copied.
     */
    eProsima_user_DllExport Inertia& operator =(
            Inertia&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs::msg::Inertia object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Inertia& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs::msg::Inertia object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Inertia& x) const;

    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            double _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport double m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport double& m();


    /*!
     * @brief This function copies the value in member com
     * @param _com New value to be copied in member com
     */
    eProsima_user_DllExport void com(
            const geometry_msgs::msg::Vector3& _com);

    /*!
     * @brief This function moves the value in member com
     * @param _com New value to be moved in member com
     */
    eProsima_user_DllExport void com(
            geometry_msgs::msg::Vector3&& _com);

    /*!
     * @brief This function returns a constant reference to member com
     * @return Constant reference to member com
     */
    eProsima_user_DllExport const geometry_msgs::msg::Vector3& com() const;

    /*!
     * @brief This function returns a reference to member com
     * @return Reference to member com
     */
    eProsima_user_DllExport geometry_msgs::msg::Vector3& com();


    /*!
     * @brief This function sets a value in member ixx
     * @param _ixx New value for member ixx
     */
    eProsima_user_DllExport void ixx(
            double _ixx);

    /*!
     * @brief This function returns the value of member ixx
     * @return Value of member ixx
     */
    eProsima_user_DllExport double ixx() const;

    /*!
     * @brief This function returns a reference to member ixx
     * @return Reference to member ixx
     */
    eProsima_user_DllExport double& ixx();


    /*!
     * @brief This function sets a value in member ixy
     * @param _ixy New value for member ixy
     */
    eProsima_user_DllExport void ixy(
            double _ixy);

    /*!
     * @brief This function returns the value of member ixy
     * @return Value of member ixy
     */
    eProsima_user_DllExport double ixy() const;

    /*!
     * @brief This function returns a reference to member ixy
     * @return Reference to member ixy
     */
    eProsima_user_DllExport double& ixy();


    /*!
     * @brief This function sets a value in member ixz
     * @param _ixz New value for member ixz
     */
    eProsima_user_DllExport void ixz(
            double _ixz);

    /*!
     * @brief This function returns the value of member ixz
     * @return Value of member ixz
     */
    eProsima_user_DllExport double ixz() const;

    /*!
     * @brief This function returns a reference to member ixz
     * @return Reference to member ixz
     */
    eProsima_user_DllExport double& ixz();


    /*!
     * @brief This function sets a value in member iyy
     * @param _iyy New value for member iyy
     */
    eProsima_user_DllExport void iyy(
            double _iyy);

    /*!
     * @brief This function returns the value of member iyy
     * @return Value of member iyy
     */
    eProsima_user_DllExport double iyy() const;

    /*!
     * @brief This function returns a reference to member iyy
     * @return Reference to member iyy
     */
    eProsima_user_DllExport double& iyy();


    /*!
     * @brief This function sets a value in member iyz
     * @param _iyz New value for member iyz
     */
    eProsima_user_DllExport void iyz(
            double _iyz);

    /*!
     * @brief This function returns the value of member iyz
     * @return Value of member iyz
     */
    eProsima_user_DllExport double iyz() const;

    /*!
     * @brief This function returns a reference to member iyz
     * @return Reference to member iyz
     */
    eProsima_user_DllExport double& iyz();


    /*!
     * @brief This function sets a value in member izz
     * @param _izz New value for member izz
     */
    eProsima_user_DllExport void izz(
            double _izz);

    /*!
     * @brief This function returns the value of member izz
     * @return Value of member izz
     */
    eProsima_user_DllExport double izz() const;

    /*!
     * @brief This function returns a reference to member izz
     * @return Reference to member izz
     */
    eProsima_user_DllExport double& izz();

private:

    double m_m{0.0};
    geometry_msgs::msg::Vector3 m_com;
    double m_ixx{0.0};
    double m_ixy{0.0};
    double m_ixz{0.0};
    double m_iyy{0.0};
    double m_iyz{0.0};
    double m_izz{0.0};

};

} // namespace msg

} // namespace geometry_msgs

#endif // _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_INERTIA_H_



