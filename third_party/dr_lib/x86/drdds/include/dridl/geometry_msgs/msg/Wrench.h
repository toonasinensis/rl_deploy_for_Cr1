// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Wrench.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_WRENCH_H_
#define _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_WRENCH_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "Vector3.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(WRENCH_SOURCE)
#define WRENCH_DllAPI __declspec( dllexport )
#else
#define WRENCH_DllAPI __declspec( dllimport )
#endif // WRENCH_SOURCE
#else
#define WRENCH_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define WRENCH_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace geometry_msgs {

namespace msg {



/*!
 * @brief This class represents the structure Wrench defined by the user in the IDL file.
 * @ingroup Wrench
 */
class Wrench
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Wrench();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Wrench();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs::msg::Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench(
            const Wrench& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs::msg::Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench(
            Wrench&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs::msg::Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench& operator =(
            const Wrench& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs::msg::Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench& operator =(
            Wrench&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs::msg::Wrench object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Wrench& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs::msg::Wrench object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Wrench& x) const;

    /*!
     * @brief This function copies the value in member force
     * @param _force New value to be copied in member force
     */
    eProsima_user_DllExport void force(
            const geometry_msgs::msg::Vector3& _force);

    /*!
     * @brief This function moves the value in member force
     * @param _force New value to be moved in member force
     */
    eProsima_user_DllExport void force(
            geometry_msgs::msg::Vector3&& _force);

    /*!
     * @brief This function returns a constant reference to member force
     * @return Constant reference to member force
     */
    eProsima_user_DllExport const geometry_msgs::msg::Vector3& force() const;

    /*!
     * @brief This function returns a reference to member force
     * @return Reference to member force
     */
    eProsima_user_DllExport geometry_msgs::msg::Vector3& force();


    /*!
     * @brief This function copies the value in member torque
     * @param _torque New value to be copied in member torque
     */
    eProsima_user_DllExport void torque(
            const geometry_msgs::msg::Vector3& _torque);

    /*!
     * @brief This function moves the value in member torque
     * @param _torque New value to be moved in member torque
     */
    eProsima_user_DllExport void torque(
            geometry_msgs::msg::Vector3&& _torque);

    /*!
     * @brief This function returns a constant reference to member torque
     * @return Constant reference to member torque
     */
    eProsima_user_DllExport const geometry_msgs::msg::Vector3& torque() const;

    /*!
     * @brief This function returns a reference to member torque
     * @return Reference to member torque
     */
    eProsima_user_DllExport geometry_msgs::msg::Vector3& torque();

private:

    geometry_msgs::msg::Vector3 m_force;
    geometry_msgs::msg::Vector3 m_torque;

};

} // namespace msg

} // namespace geometry_msgs

#endif // _FAST_DDS_GENERATED_GEOMETRY_MSGS_MSG_WRENCH_H_



