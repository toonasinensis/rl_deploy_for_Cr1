// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MultiDOFJointState.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_MULTIDOFJOINTSTATE_H_
#define _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_MULTIDOFJOINTSTATE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "geometry_msgs/msg/Twist.h"
#include "std_msgs/msg/Header.h"
#include "geometry_msgs/msg/Transform.h"
#include "geometry_msgs/msg/Wrench.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MULTIDOFJOINTSTATE_SOURCE)
#define MULTIDOFJOINTSTATE_DllAPI __declspec( dllexport )
#else
#define MULTIDOFJOINTSTATE_DllAPI __declspec( dllimport )
#endif // MULTIDOFJOINTSTATE_SOURCE
#else
#define MULTIDOFJOINTSTATE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MULTIDOFJOINTSTATE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace sensor_msgs {

namespace msg {





/*!
 * @brief This class represents the structure MultiDOFJointState defined by the user in the IDL file.
 * @ingroup MultiDOFJointState
 */
class MultiDOFJointState
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MultiDOFJointState();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MultiDOFJointState();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs::msg::MultiDOFJointState that will be copied.
     */
    eProsima_user_DllExport MultiDOFJointState(
            const MultiDOFJointState& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs::msg::MultiDOFJointState that will be copied.
     */
    eProsima_user_DllExport MultiDOFJointState(
            MultiDOFJointState&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs::msg::MultiDOFJointState that will be copied.
     */
    eProsima_user_DllExport MultiDOFJointState& operator =(
            const MultiDOFJointState& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs::msg::MultiDOFJointState that will be copied.
     */
    eProsima_user_DllExport MultiDOFJointState& operator =(
            MultiDOFJointState&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs::msg::MultiDOFJointState object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MultiDOFJointState& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs::msg::MultiDOFJointState object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MultiDOFJointState& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs::msg::Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs::msg::Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs::msg::Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs::msg::Header& header();


    /*!
     * @brief This function copies the value in member joint_names
     * @param _joint_names New value to be copied in member joint_names
     */
    eProsima_user_DllExport void joint_names(
            const std::vector<std::string>& _joint_names);

    /*!
     * @brief This function moves the value in member joint_names
     * @param _joint_names New value to be moved in member joint_names
     */
    eProsima_user_DllExport void joint_names(
            std::vector<std::string>&& _joint_names);

    /*!
     * @brief This function returns a constant reference to member joint_names
     * @return Constant reference to member joint_names
     */
    eProsima_user_DllExport const std::vector<std::string>& joint_names() const;

    /*!
     * @brief This function returns a reference to member joint_names
     * @return Reference to member joint_names
     */
    eProsima_user_DllExport std::vector<std::string>& joint_names();


    /*!
     * @brief This function copies the value in member transforms
     * @param _transforms New value to be copied in member transforms
     */
    eProsima_user_DllExport void transforms(
            const std::vector<geometry_msgs::msg::Transform>& _transforms);

    /*!
     * @brief This function moves the value in member transforms
     * @param _transforms New value to be moved in member transforms
     */
    eProsima_user_DllExport void transforms(
            std::vector<geometry_msgs::msg::Transform>&& _transforms);

    /*!
     * @brief This function returns a constant reference to member transforms
     * @return Constant reference to member transforms
     */
    eProsima_user_DllExport const std::vector<geometry_msgs::msg::Transform>& transforms() const;

    /*!
     * @brief This function returns a reference to member transforms
     * @return Reference to member transforms
     */
    eProsima_user_DllExport std::vector<geometry_msgs::msg::Transform>& transforms();


    /*!
     * @brief This function copies the value in member twist
     * @param _twist New value to be copied in member twist
     */
    eProsima_user_DllExport void twist(
            const std::vector<geometry_msgs::msg::Twist>& _twist);

    /*!
     * @brief This function moves the value in member twist
     * @param _twist New value to be moved in member twist
     */
    eProsima_user_DllExport void twist(
            std::vector<geometry_msgs::msg::Twist>&& _twist);

    /*!
     * @brief This function returns a constant reference to member twist
     * @return Constant reference to member twist
     */
    eProsima_user_DllExport const std::vector<geometry_msgs::msg::Twist>& twist() const;

    /*!
     * @brief This function returns a reference to member twist
     * @return Reference to member twist
     */
    eProsima_user_DllExport std::vector<geometry_msgs::msg::Twist>& twist();


    /*!
     * @brief This function copies the value in member wrench
     * @param _wrench New value to be copied in member wrench
     */
    eProsima_user_DllExport void wrench(
            const std::vector<geometry_msgs::msg::Wrench>& _wrench);

    /*!
     * @brief This function moves the value in member wrench
     * @param _wrench New value to be moved in member wrench
     */
    eProsima_user_DllExport void wrench(
            std::vector<geometry_msgs::msg::Wrench>&& _wrench);

    /*!
     * @brief This function returns a constant reference to member wrench
     * @return Constant reference to member wrench
     */
    eProsima_user_DllExport const std::vector<geometry_msgs::msg::Wrench>& wrench() const;

    /*!
     * @brief This function returns a reference to member wrench
     * @return Reference to member wrench
     */
    eProsima_user_DllExport std::vector<geometry_msgs::msg::Wrench>& wrench();

private:

    std_msgs::msg::Header m_header;
    std::vector<std::string> m_joint_names;
    std::vector<geometry_msgs::msg::Transform> m_transforms;
    std::vector<geometry_msgs::msg::Twist> m_twist;
    std::vector<geometry_msgs::msg::Wrench> m_wrench;

};

} // namespace msg

} // namespace sensor_msgs

#endif // _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_MULTIDOFJOINTSTATE_H_



