// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file InteractiveMarkerPose.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERPOSE_H_
#define _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERPOSE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "std_msgs/msg/Header.h"
#include "geometry_msgs/msg/Pose.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(INTERACTIVEMARKERPOSE_SOURCE)
#define INTERACTIVEMARKERPOSE_DllAPI __declspec( dllexport )
#else
#define INTERACTIVEMARKERPOSE_DllAPI __declspec( dllimport )
#endif // INTERACTIVEMARKERPOSE_SOURCE
#else
#define INTERACTIVEMARKERPOSE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define INTERACTIVEMARKERPOSE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace visualization_msgs {

namespace msg {



/*!
 * @brief This class represents the structure InteractiveMarkerPose defined by the user in the IDL file.
 * @ingroup InteractiveMarkerPose
 */
class InteractiveMarkerPose
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InteractiveMarkerPose();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InteractiveMarkerPose();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerPose that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerPose(
            const InteractiveMarkerPose& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerPose that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerPose(
            InteractiveMarkerPose&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerPose that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerPose& operator =(
            const InteractiveMarkerPose& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object visualization_msgs::msg::InteractiveMarkerPose that will be copied.
     */
    eProsima_user_DllExport InteractiveMarkerPose& operator =(
            InteractiveMarkerPose&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::InteractiveMarkerPose object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InteractiveMarkerPose& x) const;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::InteractiveMarkerPose object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InteractiveMarkerPose& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs::msg::Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs::msg::Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs::msg::Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs::msg::Header& header();


    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const geometry_msgs::msg::Pose& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            geometry_msgs::msg::Pose&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const geometry_msgs::msg::Pose& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport geometry_msgs::msg::Pose& pose();


    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();

private:

    std_msgs::msg::Header m_header;
    geometry_msgs::msg::Pose m_pose;
    std::string m_name;

};

} // namespace msg

} // namespace visualization_msgs

#endif // _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_INTERACTIVEMARKERPOSE_H_



