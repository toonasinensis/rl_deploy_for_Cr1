// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Marker.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_MARKER_H_
#define _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_MARKER_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "geometry_msgs/msg/Vector3.h"
#include "geometry_msgs/msg/Point.h"
#include "std_msgs/msg/Header.h"
#include "std_msgs/msg/ColorRGBA.h"
#include "builtin_interfaces/msg/Duration.h"
#include "geometry_msgs/msg/Pose.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MARKER_SOURCE)
#define MARKER_DllAPI __declspec( dllexport )
#else
#define MARKER_DllAPI __declspec( dllimport )
#endif // MARKER_SOURCE
#else
#define MARKER_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MARKER_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace visualization_msgs {

namespace msg {

namespace Marker_Constants {

const int32_t ARROW = 0;
const int32_t CUBE = 1;
const int32_t SPHERE = 2;
const int32_t CYLINDER = 3;
const int32_t LINE_STRIP = 4;
const int32_t LINE_LIST = 5;
const int32_t CUBE_LIST = 6;
const int32_t SPHERE_LIST = 7;
const int32_t POINTS = 8;
const int32_t TEXT_VIEW_FACING = 9;
const int32_t MESH_RESOURCE = 10;
const int32_t TRIANGLE_LIST = 11;
const int32_t ADD = 0;
const int32_t MODIFY = 0;
const int32_t DELETE = 2;
const int32_t DELETEALL = 3;

} // namespace Marker_Constants


/*!
 * @brief This class represents the structure Marker defined by the user in the IDL file.
 * @ingroup Marker
 */
class Marker
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Marker();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Marker();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object visualization_msgs::msg::Marker that will be copied.
     */
    eProsima_user_DllExport Marker(
            const Marker& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object visualization_msgs::msg::Marker that will be copied.
     */
    eProsima_user_DllExport Marker(
            Marker&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object visualization_msgs::msg::Marker that will be copied.
     */
    eProsima_user_DllExport Marker& operator =(
            const Marker& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object visualization_msgs::msg::Marker that will be copied.
     */
    eProsima_user_DllExport Marker& operator =(
            Marker&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::Marker object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Marker& x) const;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs::msg::Marker object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Marker& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs::msg::Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs::msg::Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs::msg::Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs::msg::Header& header();


    /*!
     * @brief This function copies the value in member ns
     * @param _ns New value to be copied in member ns
     */
    eProsima_user_DllExport void ns(
            const std::string& _ns);

    /*!
     * @brief This function moves the value in member ns
     * @param _ns New value to be moved in member ns
     */
    eProsima_user_DllExport void ns(
            std::string&& _ns);

    /*!
     * @brief This function returns a constant reference to member ns
     * @return Constant reference to member ns
     */
    eProsima_user_DllExport const std::string& ns() const;

    /*!
     * @brief This function returns a reference to member ns
     * @return Reference to member ns
     */
    eProsima_user_DllExport std::string& ns();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id();


    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            int32_t _type);

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport int32_t type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport int32_t& type();


    /*!
     * @brief This function sets a value in member action
     * @param _action New value for member action
     */
    eProsima_user_DllExport void action(
            int32_t _action);

    /*!
     * @brief This function returns the value of member action
     * @return Value of member action
     */
    eProsima_user_DllExport int32_t action() const;

    /*!
     * @brief This function returns a reference to member action
     * @return Reference to member action
     */
    eProsima_user_DllExport int32_t& action();


    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const geometry_msgs::msg::Pose& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            geometry_msgs::msg::Pose&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const geometry_msgs::msg::Pose& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport geometry_msgs::msg::Pose& pose();


    /*!
     * @brief This function copies the value in member scale
     * @param _scale New value to be copied in member scale
     */
    eProsima_user_DllExport void scale(
            const geometry_msgs::msg::Vector3& _scale);

    /*!
     * @brief This function moves the value in member scale
     * @param _scale New value to be moved in member scale
     */
    eProsima_user_DllExport void scale(
            geometry_msgs::msg::Vector3&& _scale);

    /*!
     * @brief This function returns a constant reference to member scale
     * @return Constant reference to member scale
     */
    eProsima_user_DllExport const geometry_msgs::msg::Vector3& scale() const;

    /*!
     * @brief This function returns a reference to member scale
     * @return Reference to member scale
     */
    eProsima_user_DllExport geometry_msgs::msg::Vector3& scale();


    /*!
     * @brief This function copies the value in member color
     * @param _color New value to be copied in member color
     */
    eProsima_user_DllExport void color(
            const std_msgs::msg::ColorRGBA& _color);

    /*!
     * @brief This function moves the value in member color
     * @param _color New value to be moved in member color
     */
    eProsima_user_DllExport void color(
            std_msgs::msg::ColorRGBA&& _color);

    /*!
     * @brief This function returns a constant reference to member color
     * @return Constant reference to member color
     */
    eProsima_user_DllExport const std_msgs::msg::ColorRGBA& color() const;

    /*!
     * @brief This function returns a reference to member color
     * @return Reference to member color
     */
    eProsima_user_DllExport std_msgs::msg::ColorRGBA& color();


    /*!
     * @brief This function copies the value in member lifetime
     * @param _lifetime New value to be copied in member lifetime
     */
    eProsima_user_DllExport void lifetime(
            const builtin_interfaces::msg::Duration& _lifetime);

    /*!
     * @brief This function moves the value in member lifetime
     * @param _lifetime New value to be moved in member lifetime
     */
    eProsima_user_DllExport void lifetime(
            builtin_interfaces::msg::Duration&& _lifetime);

    /*!
     * @brief This function returns a constant reference to member lifetime
     * @return Constant reference to member lifetime
     */
    eProsima_user_DllExport const builtin_interfaces::msg::Duration& lifetime() const;

    /*!
     * @brief This function returns a reference to member lifetime
     * @return Reference to member lifetime
     */
    eProsima_user_DllExport builtin_interfaces::msg::Duration& lifetime();


    /*!
     * @brief This function sets a value in member frame_locked
     * @param _frame_locked New value for member frame_locked
     */
    eProsima_user_DllExport void frame_locked(
            bool _frame_locked);

    /*!
     * @brief This function returns the value of member frame_locked
     * @return Value of member frame_locked
     */
    eProsima_user_DllExport bool frame_locked() const;

    /*!
     * @brief This function returns a reference to member frame_locked
     * @return Reference to member frame_locked
     */
    eProsima_user_DllExport bool& frame_locked();


    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    eProsima_user_DllExport void points(
            const std::vector<geometry_msgs::msg::Point>& _points);

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    eProsima_user_DllExport void points(
            std::vector<geometry_msgs::msg::Point>&& _points);

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    eProsima_user_DllExport const std::vector<geometry_msgs::msg::Point>& points() const;

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    eProsima_user_DllExport std::vector<geometry_msgs::msg::Point>& points();


    /*!
     * @brief This function copies the value in member colors
     * @param _colors New value to be copied in member colors
     */
    eProsima_user_DllExport void colors(
            const std::vector<std_msgs::msg::ColorRGBA>& _colors);

    /*!
     * @brief This function moves the value in member colors
     * @param _colors New value to be moved in member colors
     */
    eProsima_user_DllExport void colors(
            std::vector<std_msgs::msg::ColorRGBA>&& _colors);

    /*!
     * @brief This function returns a constant reference to member colors
     * @return Constant reference to member colors
     */
    eProsima_user_DllExport const std::vector<std_msgs::msg::ColorRGBA>& colors() const;

    /*!
     * @brief This function returns a reference to member colors
     * @return Reference to member colors
     */
    eProsima_user_DllExport std::vector<std_msgs::msg::ColorRGBA>& colors();


    /*!
     * @brief This function copies the value in member text
     * @param _text New value to be copied in member text
     */
    eProsima_user_DllExport void text(
            const std::string& _text);

    /*!
     * @brief This function moves the value in member text
     * @param _text New value to be moved in member text
     */
    eProsima_user_DllExport void text(
            std::string&& _text);

    /*!
     * @brief This function returns a constant reference to member text
     * @return Constant reference to member text
     */
    eProsima_user_DllExport const std::string& text() const;

    /*!
     * @brief This function returns a reference to member text
     * @return Reference to member text
     */
    eProsima_user_DllExport std::string& text();


    /*!
     * @brief This function copies the value in member mesh_resource
     * @param _mesh_resource New value to be copied in member mesh_resource
     */
    eProsima_user_DllExport void mesh_resource(
            const std::string& _mesh_resource);

    /*!
     * @brief This function moves the value in member mesh_resource
     * @param _mesh_resource New value to be moved in member mesh_resource
     */
    eProsima_user_DllExport void mesh_resource(
            std::string&& _mesh_resource);

    /*!
     * @brief This function returns a constant reference to member mesh_resource
     * @return Constant reference to member mesh_resource
     */
    eProsima_user_DllExport const std::string& mesh_resource() const;

    /*!
     * @brief This function returns a reference to member mesh_resource
     * @return Reference to member mesh_resource
     */
    eProsima_user_DllExport std::string& mesh_resource();


    /*!
     * @brief This function sets a value in member mesh_use_embedded_materials
     * @param _mesh_use_embedded_materials New value for member mesh_use_embedded_materials
     */
    eProsima_user_DllExport void mesh_use_embedded_materials(
            bool _mesh_use_embedded_materials);

    /*!
     * @brief This function returns the value of member mesh_use_embedded_materials
     * @return Value of member mesh_use_embedded_materials
     */
    eProsima_user_DllExport bool mesh_use_embedded_materials() const;

    /*!
     * @brief This function returns a reference to member mesh_use_embedded_materials
     * @return Reference to member mesh_use_embedded_materials
     */
    eProsima_user_DllExport bool& mesh_use_embedded_materials();

private:

    std_msgs::msg::Header m_header;
    std::string m_ns;
    int32_t m_id{0};
    int32_t m_type{0};
    int32_t m_action{0};
    geometry_msgs::msg::Pose m_pose;
    geometry_msgs::msg::Vector3 m_scale;
    std_msgs::msg::ColorRGBA m_color;
    builtin_interfaces::msg::Duration m_lifetime;
    bool m_frame_locked{false};
    std::vector<geometry_msgs::msg::Point> m_points;
    std::vector<std_msgs::msg::ColorRGBA> m_colors;
    std::string m_text;
    std::string m_mesh_resource;
    bool m_mesh_use_embedded_materials{false};

};

} // namespace msg

} // namespace visualization_msgs

#endif // _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_MARKER_H_



